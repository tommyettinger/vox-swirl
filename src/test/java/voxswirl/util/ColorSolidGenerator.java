package voxswirl.util;

import voxswirl.io.VoxIO;

public class ColorSolidGenerator {
    private static final int[] OKLAB = {
            0x00007D7D, 0x00007D7D, 0x00128282, 0x00248282, 0x00368282, 0x00498282, 0x005B8282, 0x006D8282,
            0x007F8282, 0x00928282, 0x00A48282, 0x00B68282, 0x00C98282, 0x00DB8282, 0x00ED8282, 0x00FF7D7D,
            0x00418C82, 0x006E8C82, 0x009C8C82, 0x00CA8C82, 0x00478282, 0x00758282, 0x00A48282, 0x00D28282,
            0x00488282, 0x00778282, 0x00A58282, 0x00D48282, 0x004C7D87, 0x007C7D87, 0x00AB7D87, 0x00DB7D87,
            0x00577887, 0x00877887, 0x00B67887, 0x00E57887, 0x00557387, 0x00847387, 0x00B37387, 0x00E27387,
            0x004D6E87, 0x00756E87, 0x009D6E87, 0x00C56E87, 0x0053787D, 0x0082787D, 0x00B2787D, 0x00E2787D,
            0x00397D6E, 0x00687D6E, 0x00977D6E, 0x00C67D6E, 0x003B876E, 0x006A876E, 0x0098876E, 0x00C7876E,
            0x00408C6E, 0x006F8C6E, 0x009D8C6E, 0x00CC8C6E, 0x00458C73, 0x00748C73, 0x00A38C73, 0x00D28C73,
            0x00679B91, 0x008F9B91, 0x00B69B91, 0x006D9191, 0x00969191, 0x00BF9191, 0x00718C91, 0x009A8C91,
            0x00C48C91, 0x00748C91, 0x009D8C91, 0x00C58C91, 0x00778791, 0x00A08791, 0x00C98791, 0x007C8291,
            0x00A58291, 0x00CF8291, 0x00817D91, 0x00AC7D91, 0x00D67D91, 0x008D7896, 0x00B77896, 0x00E17896,
            0x00916E96, 0x00BA6E96, 0x00E46E96, 0x008B6996, 0x00B66996, 0x00E06996, 0x00886496, 0x00B26496,
            0x00DC6496, 0x00845A96, 0x00AE5A96, 0x00D85A96, 0x00836487, 0x00A36487, 0x00C36487, 0x007F697D,
            0x009B697D, 0x00B7697D, 0x00826E73, 0x00AB6E73, 0x00D56E73, 0x006E7369, 0x00977369, 0x00C07369,
            0x00517D50, 0x00797D50, 0x00A17D50, 0x00568C55, 0x007F8C55, 0x00A98C55, 0x005D9655, 0x00869655,
            0x00AE9655, 0x00609B5A, 0x008A9B5A, 0x00B39B5A, 0x0065A05A, 0x008EA05A, 0x00B8A05A, 0x006AA55F,
            0x0094A55F, 0x00BDA55F, 0x006AAA6E, 0x0092AA6E, 0x00BAAA6E, 0x0066A087, 0x008EA087, 0x00B5A087,
            0x0087B49B, 0x00A4B49B, 0x008DAA9B, 0x00AAAA9B, 0x0092A09B, 0x00B1A09B, 0x00989BA0, 0x00B79BA0,
            0x009A96A0, 0x00B996A0, 0x009E96A0, 0x00BB96A0, 0x009D96A0, 0x00BC96A0, 0x00A08CA0, 0x00C18CA0,
            0x00A78CA0, 0x00C68CA0, 0x00AD87A0, 0x00CB87A0, 0x00B27DA5, 0x00D37DA5, 0x00BE78A5, 0x00DE78A5,
            0x00CB69AA, 0x00E969AA, 0x00C764AA, 0x00E664AA, 0x00C25FAA, 0x00E25FAA, 0x00C15AAA, 0x00DF5AAA,
            0x00BC50AA, 0x00DC50AA, 0x00BA46AA, 0x00D846AA, 0x00B141A5, 0x00C241A5, 0x00AD558C, 0x00B5558C,
            0x00B25A7D, 0x00C35A7D, 0x00BF5F73, 0x00DD5F73, 0x00AC6469, 0x00CB6469, 0x009A6E5F, 0x00B86E5F,
            0x00747837, 0x00927837, 0x006B872D, 0x0089872D, 0x00719632, 0x008E9632, 0x0079A537, 0x0097A537,
            0x007CAA3C, 0x009AAA3C, 0x0081AF41, 0x00A0AF41, 0x0085B441, 0x00A4B441, 0x0089BE46, 0x00A8BE46,
            0x008EC34B, 0x00ADC34B, 0x0094C84B, 0x00B3C84B, 0x008FC36E, 0x00ABC36E, 0x008ABE87, 0x00A7BE87,
            0x00A3CDAF, 0x00A8BEAF, 0x00AFB4AF, 0x00B5AAAF, 0x00B7A5AF, 0x00B9A5AF, 0x00B9A0AF, 0x00BCA0AF,
            0x00BE9BAF, 0x00C496AF, 0x00C891AF, 0x00CD8CB4, 0x00D287B4, 0x00DA7DB4, 0x00E673B9, 0x00F169BE,
            0x00F55FC3, 0x00F25AC3, 0x00EF50C3, 0x00EB4BC3, 0x00E841C3, 0x00E437C3, 0x00E128C3, 0x00DE23BE,
            0x00D332A5, 0x00CC418C, 0x00CE4682, 0x00D85073, 0x00DC5569, 0x00CC5A5F, 0x00BA6450, 0x00A16937,
            0x00757800, 0x007B8C05, 0x0081A00A, 0x0089AF14, 0x008FBE19, 0x0093C31E, 0x0096C81E, 0x009BCD23,
            0x009ED228, 0x00A2DC2D, 0x00A9E12D, 0x00ADE632, 0x00AFEB4B, 0x00A9E669, 0x00A5E187, 0x00A2D7A0,
    }, RGBA = {
            0x00000000, 0x000000FF, 0x050403FF, 0x0F0D0CFF, 0x1A1817FF, 0x292625FF, 0x393534FF, 0x4A4645FF,
            0x5C5957FF, 0x726E6CFF, 0x878381FF, 0x9D9997FF, 0xB6B2B0FF, 0xCFCAC8FF, 0xE9E4E2FF, 0xFBFFFFFF,
            0x281D1EFF, 0x524445FF, 0x867577FF, 0xC2AFB0FF, 0x272523FF, 0x524E4DFF, 0x878381FF, 0xC3BEBCFF,
            0x282524FF, 0x54504FFF, 0x888482FF, 0xC5C1BEFF, 0x2A2A24FF, 0x57574FFF, 0x8D8D84FF, 0xCCCCC2FF,
            0x2F342DFF, 0x5E655BFF, 0x959D92FF, 0xD4DDD0FF, 0x2A342BFF, 0x576358FF, 0x8D9B8EFF, 0xCBDACCFF,
            0x202E25FF, 0x435449FF, 0x6D8174FF, 0x9EB4A5FF, 0x293131FF, 0x555F5FFF, 0x8C9898FF, 0xCCD8D8FF,
            0x151B25FF, 0x3B4351FF, 0x6B7586FF, 0xA5AFC3FF, 0x1C1A27FF, 0x454252FF, 0x767286FF, 0xB1ADC4FF,
            0x231C2BFF, 0x4D4557FF, 0x80768CFF, 0xBCB1CAFF, 0x28202CFF, 0x544A58FF, 0x897E8FFF, 0xC7BACDFF,
            0x583832FF, 0x876159FF, 0xBA8E85FF, 0x594137FF, 0x886C61FF, 0xBD9E91FF, 0x5A473BFF, 0x897365FF,
            0xC0A797FF, 0x5D4A3EFF, 0x8D7669FF, 0xC1A898FF, 0x5C4E41FF, 0x8C7C6CFF, 0xC2AF9EFF, 0x5E5546FF,
            0x8E8472FF, 0xC5BAA6FF, 0x605C4BFF, 0x928E7AFF, 0xC9C5AFFF, 0x6A6B53FF, 0x9D9E82FF, 0xD6D7B8FF,
            0x667357FF, 0x97A586FF, 0xCFDFBCFF, 0x5B6D51FF, 0x8CA281FF, 0xC3DBB7FF, 0x536C4EFF, 0x829F7DFF,
            0xB8D8B2FF, 0x446A4AFF, 0x729D78FF, 0xA6D6ADFF, 0x476658FF, 0x6A8C7BFF, 0x90B5A3FF, 0x44605DFF,
            0x62807CFF, 0x82A39FFF, 0x486269FF, 0x75929AFF, 0xAACAD2FF, 0x364B5BFF, 0x60788BFF, 0x90ABC0FF,
            0x1F2B4FFF, 0x42527DFF, 0x6C7FB0FF, 0x302C51FF, 0x56547FFF, 0x8684B5FF, 0x3C3058FF, 0x665887FF,
            0x9586BCFF, 0x443157FF, 0x705B87FF, 0xA28ABDFF, 0x4C345CFF, 0x795D8CFF, 0xAD8FC4FF, 0x55375DFF,
            0x85628FFF, 0xBA93C5FF, 0x5C3651FF, 0x8B5E7EFF, 0xC08DB0FF, 0x583639FF, 0x865E61FF, 0xB98B8FFF,
            0x914D45FF, 0xB96D64FF, 0x92584CFF, 0xB9796BFF, 0x926151FF, 0xBB8674FF, 0x976A52FF, 0xC18F75FF,
            0x966E55FF, 0xBF9478FF, 0x9B7359FF, 0xC2967AFF, 0x9A7258FF, 0xC4987BFF, 0x96795BFF, 0xC1A282FF,
            0x9F8263FF, 0xC8A988FF, 0xA28B6AFF, 0xCBB28EFF, 0xA2956AFF, 0xCEC092FF, 0xADA679FF, 0xD8D2A1FF,
            0xB1BD83FF, 0xDAE8A9FF, 0xA6BA7EFF, 0xD0E5A5FF, 0x9AB578FF, 0xC4E2A0FF, 0x93B577FF, 0xBADF9DFF,
            0x81B271FF, 0xAADF99FF, 0x72B36FFF, 0x97DD94FF, 0x5DA86BFF, 0x72C07FFF, 0x669D83FF, 0x6FA88CFF,
            0x6AA299FF, 0x7FB9AFFF, 0x7BB1B5FF, 0xA1DBDFFF, 0x6696A6FF, 0x8BBFD0FF, 0x597D99FF, 0x7CA2C1FF,
            0x304B8DFF, 0x4D6CB4FF, 0x353C89FF, 0x515CB1FF, 0x483E8CFF, 0x655DB2FF, 0x5C4191FF, 0x7D62B9FF,
            0x644390FF, 0x8664B8FF, 0x6E4792FF, 0x9369BBFF, 0x764997FF, 0x9C6CC1FF, 0x834A97FF, 0xAB6DC1FF,
            0x8E4D99FF, 0xB770C2FF, 0x9A51A0FF, 0xC475CBFF, 0x995079FF, 0xBF6F9CFF, 0x964D5CFF, 0xBE6D7DFF,
            0xCF5D4BFF, 0xCC6B51FF, 0xCF7959FF, 0xD08560FF, 0xCF8A62FF, 0xD28C65FF, 0xCE8E65FF, 0xD29268FF,
            0xD0976BFF, 0xD5A172FF, 0xD6A877FF, 0xDBB177FF, 0xDDBA7DFF, 0xDFC987FF, 0xE8DE90FF, 0xEFF298FF,
            0xECFC96FF, 0xE2FA92FF, 0xD2FA8FFF, 0xC6F68AFF, 0xB5F586FF, 0xA2F381FF, 0x87F47EFF, 0x76F182FF,
            0x6FDD95FF, 0x6ECEABFF, 0x72CFB9FF, 0x86D9D8FF, 0x8CDDEAFF, 0x7AC4DEFF, 0x6AA7D4FF, 0x4983CAFF,
            0x233FBFFF, 0x3F41C2FF, 0x5742C5FF, 0x6D47C6FF, 0x8049CAFF, 0x8A4CCAFF, 0x914DCFFF, 0x9C51D1FF,
            0xA553D0FF, 0xB353D0FF, 0xC058DAFF, 0xCB5BDBFF, 0xD85DC3FF, 0xD45A9DFF, 0xD45779FF, 0xD0585BFF,
    };

    public static void main(String[] args){
        byte[][][] data = new byte[256][256][256];
        for (int i = 1; i < 256; i++) {
            int oklab = OKLAB[i] & 0xFFFFFF;
            data[oklab & 0xFF][oklab >>> 8 & 0xFF][oklab >>> 16] = (byte) i;
        }
        VoxIO.writeVOX("Yamod.vox", data, RGBA);
    }
}
