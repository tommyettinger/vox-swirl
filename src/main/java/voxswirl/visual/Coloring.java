package voxswirl.visual;

import com.badlogic.gdx.math.MathUtils;

import java.nio.charset.StandardCharsets;

import static java.lang.Math.max;
import static java.lang.Math.min;

/**
 * Created by Tommy Ettinger on 11/4/2017.
 */
public class Coloring {

    public static int lighten(final int rgba, float amount){
//        final int r = rgba >>> 24      ;
//        final int g = rgba >>> 16 & 255;
//        final int b = rgba >>> 8 & 255 ;
//        
//        amount *= 255.5f - Math.max(r, Math.max(g, b));
//        return  (int)(r + amount) << 24 |
//                (int)(g + amount) << 16 |
//                (int)(b + amount) << 8 |
//                (rgba & 255);
        return  (int) MathUtils.lerp(rgba >>> 24, 255.5f, amount) << 24 |
                (int) MathUtils.lerp(rgba >>> 16 & 255, 255.5f, amount) << 16 |
                (int) MathUtils.lerp(rgba >>> 8 & 255, 255.5f, amount) << 8 |
                (rgba & 255);
    }
    public static int darken(final int rgba, float amount){
        amount = 1f - amount;
        return (int)((rgba >>> 24) * amount) << 24 |
                (int)((rgba >>> 16 & 255) * amount) << 16 |
                (int)((rgba >>> 8 & 255) * amount) << 8 |
                (rgba & 255);
    }
    public static int adjust(final int rgba, float lightnessMultiplier, float saturationMultiplier){
        final int r = rgba >>> 24      ;
        final int g = rgba >>> 16 & 255;
        final int b = rgba >>> 8 & 255 ;
        final int mid = max(min(r, g), min(max(r, g), b));

        return  (int)MathUtils.clamp(mid * lightnessMultiplier + (r - mid) * saturationMultiplier, 0f, 255f) << 24 |
                (int)MathUtils.clamp(mid * lightnessMultiplier + (g - mid) * saturationMultiplier, 0f, 255f) << 16 |
                (int)MathUtils.clamp(mid * lightnessMultiplier + (b - mid) * saturationMultiplier, 0f, 255f) << 8 |
                (rgba & 255);
    }



    /**
     * DawnBringer's 256-color Aurora palette, modified slightly to fit one transparent color by removing one gray.
     * Aurora is available in <a href="http://pixeljoint.com/forum/forum_posts.asp?TID=26080&KW=">this set of tools</a>
     * for a pixel art editor, but it is usable for lots of high-color purposes.
     */
    public static final int[] AURORA = {
            0x00000000, 0x010101FF, 0x131313FF, 0x252525FF, 0x373737FF, 0x494949FF, 0x5B5B5BFF, 0x6E6E6EFF,
            0x808080FF, 0x929292FF, 0xA4A4A4FF, 0xB6B6B6FF, 0xC9C9C9FF, 0xDBDBDBFF, 0xEDEDEDFF, 0xFFFFFFFF,
            0x007F7FFF, 0x3FBFBFFF, 0x00FFFFFF, 0xBFFFFFFF, 0x8181FFFF, 0x0000FFFF, 0x3F3FBFFF, 0x00007FFF,
            0x0F0F50FF, 0x7F007FFF, 0xBF3FBFFF, 0xF500F5FF, 0xFD81FFFF, 0xFFC0CBFF, 0xFF8181FF, 0xFF0000FF,
            0xBF3F3FFF, 0x7F0000FF, 0x551414FF, 0x7F3F00FF, 0xBF7F3FFF, 0xFF7F00FF, 0xFFBF81FF, 0xFFFFBFFF,
            0xFFFF00FF, 0xBFBF3FFF, 0x7F7F00FF, 0x007F00FF, 0x3FBF3FFF, 0x00FF00FF, 0xAFFFAFFF, 0xBCAFC0FF,
            0xCBAA89FF, 0xA6A090FF, 0x7E9494FF, 0x6E8287FF, 0x7E6E60FF, 0xA0695FFF, 0xC07872FF, 0xD08A74FF,
            0xE19B7DFF, 0xEBAA8CFF, 0xF5B99BFF, 0xF6C8AFFF, 0xF5E1D2FF, 0x573B3BFF, 0x73413CFF, 0x8E5555FF,
            0xAB7373FF, 0xC78F8FFF, 0xE3ABABFF, 0xF8D2DAFF, 0xE3C7ABFF, 0xC49E73FF, 0x8F7357FF, 0x73573BFF,
            0x3B2D1FFF, 0x414123FF, 0x73733BFF, 0x8F8F57FF, 0xA2A255FF, 0xB5B572FF, 0xC7C78FFF, 0xDADAABFF,
            0xEDEDC7FF, 0xC7E3ABFF, 0xABC78FFF, 0x8EBE55FF, 0x738F57FF, 0x587D3EFF, 0x465032FF, 0x191E0FFF,
            0x235037FF, 0x3B573BFF, 0x506450FF, 0x3B7349FF, 0x578F57FF, 0x73AB73FF, 0x64C082FF, 0x8FC78FFF,
            0xA2D8A2FF, 0xE1F8FAFF, 0xB4EECAFF, 0xABE3C5FF, 0x87B48EFF, 0x507D5FFF, 0x0F6946FF, 0x1E2D23FF,
            0x234146FF, 0x3B7373FF, 0x64ABABFF, 0x8FC7C7FF, 0xABE3E3FF, 0xC7F1F1FF, 0xBED2F0FF, 0xABC7E3FF,
            0xA8B9DCFF, 0x8FABC7FF, 0x578FC7FF, 0x57738FFF, 0x3B5773FF, 0x0F192DFF, 0x1F1F3BFF, 0x3B3B57FF,
            0x494973FF, 0x57578FFF, 0x736EAAFF, 0x7676CAFF, 0x8F8FC7FF, 0xABABE3FF, 0xD0DAF8FF, 0xE3E3FFFF,
            0xAB8FC7FF, 0x8F57C7FF, 0x73578FFF, 0x573B73FF, 0x3C233CFF, 0x463246FF, 0x724072FF, 0x8F578FFF,
            0xAB57ABFF, 0xAB73ABFF, 0xEBACE1FF, 0xFFDCF5FF, 0xE3C7E3FF, 0xE1B9D2FF, 0xD7A0BEFF, 0xC78FB9FF,
            0xC87DA0FF, 0xC35A91FF, 0x4B2837FF, 0x321623FF, 0x280A1EFF, 0x401811FF, 0x621800FF, 0xA5140AFF,
            0xDA2010FF, 0xD5524AFF, 0xFF3C0AFF, 0xF55A32FF, 0xFF6262FF, 0xF6BD31FF, 0xFFA53CFF, 0xD79B0FFF,
            0xDA6E0AFF, 0xB45A00FF, 0xA04B05FF, 0x5F3214FF, 0x53500AFF, 0x626200FF, 0x8C805AFF, 0xAC9400FF,
            0xB1B10AFF, 0xE6D55AFF, 0xFFD510FF, 0xFFEA4AFF, 0xC8FF41FF, 0x9BF046FF, 0x96DC19FF, 0x73C805FF,
            0x6AA805FF, 0x3C6E14FF, 0x283405FF, 0x204608FF, 0x0C5C0CFF, 0x149605FF, 0x0AD70AFF, 0x14E60AFF,
            0x7DFF73FF, 0x4BF05AFF, 0x00C514FF, 0x05B450FF, 0x1C8C4EFF, 0x123832FF, 0x129880FF, 0x06C491FF,
            0x00DE6AFF, 0x2DEBA8FF, 0x3CFEA5FF, 0x6AFFCDFF, 0x91EBFFFF, 0x55E6FFFF, 0x7DD7F0FF, 0x08DED5FF,
            0x109CDEFF, 0x055A5CFF, 0x162C52FF, 0x0F377DFF, 0x004A9CFF, 0x326496FF, 0x0052F6FF, 0x186ABDFF,
            0x2378DCFF, 0x699DC3FF, 0x4AA4FFFF, 0x90B0FFFF, 0x5AC5FFFF, 0xBEB9FAFF, 0x00BFFFFF, 0x007FFFFF,
            0x4B7DC8FF, 0x786EF0FF, 0x4A5AFFFF, 0x6241F6FF, 0x3C3CF5FF, 0x101CDAFF, 0x0010BDFF, 0x231094FF,
            0x0C2148FF, 0x5010B0FF, 0x6010D0FF, 0x8732D2FF, 0x9C41FFFF, 0x7F00FFFF, 0xBD62FFFF, 0xB991FFFF,
            0xD7A5FFFF, 0xD7C3FAFF, 0xF8C6FCFF, 0xE673FFFF, 0xFF52FFFF, 0xDA20E0FF, 0xBD29FFFF, 0xBD10C5FF,
            0x8C14BEFF, 0x5A187BFF, 0x641464FF, 0x410062FF, 0x320A46FF, 0x551937FF, 0xA01982FF, 0xC80078FF,
            0xFF50BFFF, 0xFF6AC5FF, 0xFAA0B9FF, 0xFC3A8CFF, 0xE61E78FF, 0xBD1039FF, 0x98344DFF, 0x911437FF,
    };

    /**
     * This palette was given along with the Unseven palette
     * <a href="https://www.deviantart.com/foguinhos/art/Unseven-Full-541514728">in this set of swatches</a>, but it's
     * unclear if Unseven made it, or if this palette was published in some other medium. It's a nice palette, with 8
     * levels of lightness ramp for 30 ramps with different hues. It seems meant for pixel art that includes human
     * characters, and doesn't lack for skin tones like Unseven does. It has a generally good selection of light brown
     * colors, and has been adjusted to add some dark brown colors, as well as vividly saturated purple. Many ramps also
     * become more purple as they go into darker shades.
     * <p>
     * This is organized so the colors from index 24 to index 255 inclusive are sorted by hue, from red to orange to
     * yellow to green to blue to purple, while still being organized in blocks of 8 colors at a time from bright to
     * dark. Some almost-grayscale blocks are jumbled in the middle, but they do have a hue and it is always at the
     * point where they are in the sort. A block of colors that are practically true grayscale are at indices 16-23,
     * inclusive.
     */
    public static final int[] RINSED = {
            0x00000000, 0x4444447F, 0x1111117F, 0x88FFFF00, 0x2121217F, 0x00FF003F, 0x0000FF3F, 0x0808083F,
            0xFF574600, 0xFFB14600, 0xFFFD4600, 0x4BFF4600, 0x51BF6C00, 0x4697FF00, 0x9146FF00, 0xFF46AE00,
            0xF8F9FAFF, 0xC4C3C5FF, 0x9C9C9DFF, 0x757676FF, 0x616262FF, 0x4C484AFF, 0x252626FF, 0x090304FF,
            0xD89789FF, 0xC4877AFF, 0xB47B76FF, 0xA36C72FF, 0x905861FF, 0x76454CFF, 0x5F3234FF, 0x452327FF,
            0xF9DCB8FF, 0xCEB29AFF, 0xB29891FF, 0x8F797FFF, 0x75636FFF, 0x554B67FF, 0x3E3552FF, 0x272340FF,
            0xEAA18DFF, 0xCF9180FF, 0xB87C6BFF, 0xA06A60FF, 0x905C59FF, 0x73474BFF, 0x52383EFF, 0x35242AFF,
            0xBEAE97FF, 0xB0968AFF, 0x89756EFF, 0x6E5A54FF, 0x4F413CFF, 0x413534FF, 0x2F2525FF, 0x1C1415FF,
            0xEED8A1FF, 0xE7B38CFF, 0xCC967FFF, 0xB6776DFF, 0x995A55FF, 0x803D49FF, 0x662139FF, 0x500328FF,
            0xFDFE9CFF, 0xFDD7AAFF, 0xE9BBA4FF, 0xC9A09DFF, 0xB7889AFF, 0x957088FF, 0x755B7BFF, 0x514265FF,
            0xFDF067FF, 0xFDBF60FF, 0xEF995AFF, 0xCC7148FF, 0xB65549FF, 0xA34547FF, 0x7D303FFF, 0x61242FFF,
            0xDDBBA4FF, 0xC0A68FFF, 0x9F8871FF, 0x7F6B5CFF, 0x6B5755FF, 0x5D464CFF, 0x482F3DFF, 0x30232DFF,
            0xFEF5E1FF, 0xE9DFD3FF, 0xCFC5BAFF, 0xBAAFABFF, 0xAAA291FF, 0x9A877BFF, 0x816F69FF, 0x615D56FF,
            0xFEF1A8FF, 0xE4CE85FF, 0xC9AD77FF, 0xB19169FF, 0x957859FF, 0x7B604CFF, 0x60463BFF, 0x472F2AFF,
            0xFEFC74FF, 0xE8D861FF, 0xCDAD53FF, 0xB2893EFF, 0x91672FFF, 0x7D4F21FF, 0x693C12FF, 0x562810FF,
            0xFDFCB7FF, 0xFCFA3CFF, 0xFAD725FF, 0xF5B325FF, 0xD7853CFF, 0xB25345FF, 0x8A2B2BFF, 0x67160AFF,
            0xCBD350FF, 0xB3B24BFF, 0x9A9E3AFF, 0x808B30FF, 0x647717FF, 0x4B6309FF, 0x305413FF, 0x272A07FF,
            0x8DC655FF, 0x7BA838FF, 0x6C8A37FF, 0x5D733AFF, 0x4F633CFF, 0x3F5244FF, 0x323D4AFF, 0x232A45FF,
            0xADD54BFF, 0x80B040FF, 0x599135FF, 0x35761AFF, 0x2A621FFF, 0x1E5220FF, 0x063824FF, 0x012B1DFF,
            0xE8FFEFFF, 0xA9DDC0FF, 0x95C89CFF, 0x91B48EFF, 0x759983FF, 0x627F72FF, 0x4C655CFF, 0x36514AFF,
            0x91E49DFF, 0x69C085FF, 0x4F8F62FF, 0x4A7855FF, 0x396044FF, 0x385240FF, 0x31413DFF, 0x233631FF,
            0x09EFD0FF, 0x07CCA2FF, 0x03AA83FF, 0x038D75FF, 0x04726DFF, 0x01585AFF, 0x05454EFF, 0x083142FF,
            0x97D6F9FF, 0x3EB0CAFF, 0x3C919FFF, 0x0A737CFF, 0x226171FF, 0x0B505FFF, 0x0D3948FF, 0x052935FF,
            0x91FCFCFF, 0x68DBFEFF, 0x5CB1D5FF, 0x4C8CAAFF, 0x406883FF, 0x2B4965FF, 0x29324DFF, 0x1C1E34FF,
            0x80D1FBFF, 0x62B2E7FF, 0x4D96DBFF, 0x267DB9FF, 0x195F97FF, 0x114776FF, 0x0B355AFF, 0x031D41FF,
            0xCEEEFDFF, 0xCDD7FEFF, 0xA1AED7FF, 0x898CAEFF, 0x7C7196FF, 0x5E597CFF, 0x404163FF, 0x26294CFF,
            0x8391C1FF, 0x7181CAFF, 0x5E71BEFF, 0x555FA2FF, 0x424C84FF, 0x323B6DFF, 0x2B325CFF, 0x292349FF,
            0xE3D1FDFF, 0xBAABFAFF, 0x9F94E2FF, 0x9588D7FF, 0x7B71B3FF, 0x675E9CFF, 0x4F4D7CFF, 0x333158FF,
            0xA570FFFF, 0x9462FFFF, 0x814EFFFF, 0x6C39FCFF, 0x582DC1FF, 0x472195FF, 0x412160FF, 0x2E1F38FF,
            0xF7C1E7FF, 0xD791C6FF, 0xBB6FAAFF, 0xAF6190FF, 0x924B76FF, 0x623155FF, 0x47253FFF, 0x2F0E25FF,
            0xFDC7FBFF, 0xFC9FC5FF, 0xFB71A9FF, 0xE6497EFF, 0xC33C6BFF, 0x933255FF, 0x68243FFF, 0x3F122AFF,
            0xFDDDDCFF, 0xD1ABB1FF, 0xB48C9AFF, 0x9D7482FF, 0x8B5D6EFF, 0x705057FF, 0x583C4BFF, 0x421E29FF,
            0xFCD9FBFF, 0xFDB8C7FF, 0xFD97AAFF, 0xF46E7EFF, 0xC65365FF, 0x9E303CFF, 0x741B28FF, 0x50071AFF,
    };

//    /**
//     * Big OrderedMap of a name for each color in {@link #RINSED}, mapping String keys to index values, while also
//     * allowing lookup from an index to the corresponding String key using {@link OrderedMap#keyAt(int)}.
//     * Colors with numbers after the names have 0 mean the lightest color in a ramp and 7 mean the darkest.
//     * If you're reading the source, there's a comment above each ramp saying which index that ramp would have out of
//     * the full list of 30 ramps (each with 8 colors). The first ramp, which goes from white to black, takes up index 16
//     * to index 23. Before that, there's various special-use colors, such as invisible connectors for joining parts of
//     * some larger model, and a reserved black outline for when solid black surrounds the edges of a render.
//     */
//    public static final OrderedMap<String, Integer> RINSED_NAMES = OrderedMap.makeMap(
//            "Transparent", 0, "Shadow", 1, "Black Outline", 2, "Outlined Glass", 3,
//            "Gleaming Eyes", 4, "Green Placeholder", 5, "Blue Placeholder", 6, "Dark Placeholder", 7,
//            "Connector A", 8, "Connector B", 9, "Connector C", 10, "Connector D", 11,
//            "Connector E", 12, "Connector F", 13, "Connector G", 14, "Connector H", 15,
//            //0
//            "Gray 0", 16, "Gray 1", 17, "Gray 2", 18, "Gray 3", 19,
//            "Gray 4", 20, "Gray 5", 21, "Gray 6", 22, "Gray 7", 23,
//            //1
//            "Blush Skin 0", 24, "Blush Skin 1", 25, "Blush Skin 2", 26, "Blush Skin 3", 27,
//            "Blush Skin 4", 28, "Blush Skin 5", 29, "Blush Skin 6", 30, "Blush Skin 7", 31,
//            //2
//            "Dark Deepening Skin 0", 32, "Dark Deepening Skin 1", 33, "Dark Deepening Skin 2", 34, "Dark Deepening Skin 3", 35,
//            "Dark Deepening Skin 4", 36, "Dark Deepening Skin 5", 37, "Dark Deepening Skin 6", 38, "Dark Deepening Skin 7", 39,
//            //3
//            "Warm Skin 0", 40, "Warm Skin 1", 41, "Warm Skin 2", 42, "Warm Skin 3", 43,
//            "Warm Skin 4", 44, "Warm Skin 5", 45, "Warm Skin 6", 46, "Warm Skin 7", 47,
//            //4
//            "Dark Skin 0", 48, "Dark Skin 1", 49, "Dark Skin 2", 50, "Dark Skin 3", 51,
//            "Dark Skin 4", 52, "Dark Skin 5", 53, "Dark Skin 6", 54, "Dark Skin 7", 55,
//            //5
//            "Bold Skin 0", 56, "Bold Skin 1", 57, "Bold Skin 2", 58, "Bold Skin 3", 59,
//            "Bold Skin 4", 60, "Bold Skin 5", 61, "Bold Skin 6", 62, "Bold Skin 7", 63,
//            //6
//            "Light Deepening Skin 0", 64, "Light Deepening Skin 1", 65, "Light Deepening Skin 2", 66, "Light Deepening Skin 3", 67,
//            "Light Deepening Skin 4", 68, "Light Deepening Skin 5", 69, "Light Deepening Skin 6", 70, "Light Deepening Skin 7", 71,
//            //7
//            "Yellow Orange 0", 72, "Yellow Orange 1", 73, "Yellow Orange 2", 74, "Yellow Orange 3", 75,
//            "Yellow Orange 4", 76, "Yellow Orange 5", 77, "Yellow Orange 6", 78, "Yellow Orange 7", 79,
//            //8
//            "Wood 0", 80, "Wood 1", 81, "Wood 2", 82, "Wood 3", 83,
//            "Wood 4", 84, "Wood 5", 85, "Wood 6", 86, "Wood 7", 87,
//            //9
//            "Discolored Gray 0", 88, "Discolored Gray 1", 89, "Discolored Gray 2", 90, "Discolored Gray 3", 91,
//            "Discolored Gray 4", 92, "Discolored Gray 5", 93, "Discolored Gray 6", 94, "Discolored Gray 7", 95,
//            //10
//            "Bronze Skin 0", 96, "Bronze Skin 1", 97, "Bronze Skin 2", 98, "Bronze Skin 3", 99,
//            "Bronze Skin 4", 100, "Bronze Skin 5", 101, "Bronze Skin 6", 102, "Bronze Skin 7", 103,
//            //11
//            "Gold Fur 0", 104, "Gold Fur 1", 105, "Gold Fur 2", 106, "Gold Fur 3", 107,
//            "Gold Fur 4", 108, "Gold Fur 5", 109, "Gold Fur 6", 110, "Gold Fur 7", 111,
//            //12
//            "Fire 0", 112, "Fire 1", 113, "Fire 2", 114, "Fire 3", 115,
//            "Fire 4", 116, "Fire 5", 117, "Fire 6", 118, "Fire 7", 119,
//            //13
//            "Avocado 0", 120, "Avocado 1", 121, "Avocado 2", 122, "Avocado 3", 123,
//            "Avocado 4", 124, "Avocado 5", 125, "Avocado 6", 126, "Avocado 7", 127,
//            //14
//            "Dull Green 0", 128, "Dull Green 1", 129, "Dull Green 2", 130, "Dull Green 3", 131,
//            "Dull Green 4", 132, "Dull Green 5", 133, "Dull Green 6", 134, "Dull Green 7", 135,
//            //15
//            "Vivid Green 0", 136, "Vivid Green 1", 137, "Vivid Green 2", 138, "Vivid Green 3", 139,
//            "Vivid Green 4", 140, "Vivid Green 5", 141, "Vivid Green 6", 142, "Vivid Green 7", 143,
//            //16
//            "Gray Green 0", 144, "Gray Green 1", 145, "Gray Green 2", 146, "Gray Green 3", 147,
//            "Gray Green 4", 148, "Gray Green 5", 149, "Gray Green 6", 150, "Gray Green 7", 151,
//            //17
//            "Cold Forest 0", 152, "Cold Forest 1", 153, "Cold Forest 2", 154, "Cold Forest 3", 155,
//            "Cold Forest 4", 156, "Cold Forest 5", 157, "Cold Forest 6", 158, "Cold Forest 7", 159,
//            //18
//            "Turquoise 0", 160, "Turquoise 1", 161, "Turquoise 2", 162, "Turquoise 3", 163,
//            "Turquoise 4", 164, "Turquoise 5", 165, "Turquoise 6", 166, "Turquoise 7", 167,
//            //19
//            "Coastal Water 0", 168, "Coastal Water 1", 169, "Coastal Water 2", 170, "Coastal Water 3", 171,
//            "Coastal Water 4", 172, "Coastal Water 5", 173, "Coastal Water 6", 174, "Coastal Water 7", 175,
//            //20
//            "Ice 0", 176, "Ice 1", 177, "Ice 2", 178, "Ice 3", 179,
//            "Ice 4", 180, "Ice 5", 181, "Ice 6", 182, "Ice 7", 183,
//            //21
//            "Powder Blue 0", 184, "Powder Blue 1", 185, "Powder Blue 2", 186, "Powder Blue 3", 187,
//            "Powder Blue 4", 188, "Powder Blue 5", 189, "Powder Blue 6", 190, "Powder Blue 7", 191,
//            //22
//            "Dusty Gray 0", 192, "Dusty Gray 1", 193, "Dusty Gray 2", 194, "Dusty Gray 3", 195,
//            "Dusty Gray 4", 196, "Dusty Gray 5", 197, "Dusty Gray 6", 198, "Dusty Gray 7", 199,
//            //23
//            "Blue Steel 0", 200, "Blue Steel 1", 201, "Blue Steel 2", 202, "Blue Steel 3", 203,
//            "Blue Steel 4", 204, "Blue Steel 5", 205, "Blue Steel 6", 206, "Blue Steel 7", 207,
//            //24
//            "Lavender 0", 208, "Lavender 1", 209, "Lavender 2", 210, "Lavender 3", 211,
//            "Lavender 4", 212, "Lavender 5", 213, "Lavender 6", 214, "Lavender 7", 215,
//            //25
//            "Heliotrope 0", 216, "Heliotrope 1", 217, "Heliotrope 2", 218, "Heliotrope 3", 219,
//            "Heliotrope 4", 220, "Heliotrope 5", 221, "Heliotrope 6", 222, "Heliotrope 7", 223,
//            //26
//            "Purple 0", 224, "Purple 1", 225, "Purple 2", 226, "Purple 3", 227,
//            "Purple 4", 228, "Purple 5", 229, "Purple 6", 230, "Purple 7", 231,
//            //27
//            "Hot Pink 0", 232, "Hot Pink 1", 233, "Hot Pink 2", 234, "Hot Pink 3", 235,
//            "Hot Pink 4", 236, "Hot Pink 5", 237, "Hot Pink 6", 238, "Hot Pink 7", 239,
//            //28
//            "Withered Plum 0", 240, "Withered Plum 1", 241, "Withered Plum 2", 242, "Withered Plum 3", 243,
//            "Withered Plum 4", 244, "Withered Plum 5", 245, "Withered Plum 6", 246, "Withered Plum 7", 247,
//            //29
//            "Red 0", 248, "Red 1", 249, "Red 2", 250, "Red 3", 251,
//            "Red 4", 252, "Red 5", 253, "Red 6", 254, "Red 7", 255);
//    
//    public static final int[] PURE = {
//            0x00000000, 
//            0x000000FF, 0x202020FF, 0x404040FF, 0x606060FF, 0x808080FF, 0xA0A0A0FF, 0xC0C0C0FF, 0xE0E0E0FF, 0xFFFFFFFF, //Gray
//            0xBEAE97FF, 0xB0968AFF, 0x89756EFF, 0x6E5A54FF, 0x4F413CFF, 0x413534FF, 0x2F2525FF, 0x1C1415FF, //Dark Skin
//            0xFDFE9CFF, 0xFDD7AAFF, 0xE9BBA4FF, 0xC9A09DFF, 0xB7889AFF, 0x957088FF, 0x755B7BFF, 0x514265FF, //Light Deepening Skin
//            0xDDBBA4FF, 0xC0A68FFF, 0x9F8871FF, 0x7F6B5CFF, 0x6B5755FF, 0x5D464CFF, 0x482F3DFF, 0x30232DFF, //Wood
//            0xFDFCB7FF, 0xFCFA3CFF, 0xFAD725FF, 0xF5B325FF, 0xD7853CFF, 0xB25345FF, 0x8A2B2BFF, 0x67160AFF, //Fire
//            //0x8DC655FF, 0x7BA838FF, 0x6C8A37FF, 0x5D733AFF, 0x4F633CFF, 0x3F5244FF, 0x323D4AFF, 0x232A45FF, //Dull Green
//            0xADD54BFF, 0x80B040FF, 0x599135FF, 0x35761AFF, 0x2A621FFF, 0x1E5220FF, 0x063824FF, 0x012B1DFF, //Vivid Green
//            0x97D6F9FF, 0x3EB0CAFF, 0x3C919FFF, 0x0A737CFF, 0x226171FF, 0x0B505FFF, 0x0D3948FF, 0x052935FF, //Coastal Water
//            0x8391C1FF, 0x7181CAFF, 0x5E71BEFF, 0x555FA2FF, 0x424C84FF, 0x323B6DFF, 0x2B325CFF, 0x292349FF, //Blue Steel
//            0xE3D1FDFF, 0xBAABFAFF, 0x9F94E2FF, 0x9588D7FF, 0x7B71B3FF, 0x675E9CFF, 0x4F4D7CFF, 0x333158FF, //Lavender
//            //0xF7C1E7FF, 0xD791C6FF, 0xBB6FAAFF, 0xAF6190FF, 0x924B76FF, 0x623155FF, 0x47253FFF, 0x2F0E25FF, //Purple
//            0xFCD9FBFF, 0xFDB8C7FF, 0xFD97AAFF, 0xF46E7EFF, 0xC65365FF, 0x9E303CFF, 0x741B28FF, 0x50071AFF, //Red
//    };

    public static final int[] DB8 = {
        0x00000000, 0x000000FF, 0x55415FFF, 0x646964FF, 0xD77355FF, 0x508CD7FF, 0x64B964FF, 0xE6C86EFF, 0xDCF5FFFF,
    };

    /**
     * DawnBringer16 palette, plus transparent first. Has slight changes to match the palette used in DawnLike.
     */
    public static final int[] DB16 = {
            0x00000000,
            0x140C1CFF, 0x452434FF, 0x30346DFF, 0x4D494DFF, 0x864D30FF, 0x346524FF, 0xD34549FF, 0x757161FF,
            0x597DCFFF, 0xD37D2CFF, 0x8696A2FF, 0x6DAA2CFF, 0xD3AA9AFF, 0x6DC3CBFF, 0xDBD75DFF, 0xDFEFD7FF,
    };


    /**
     * DawnBringer32 palette, plus transparent first.
     */
    public static final int[] DB32 = {
            0x00000000,
            0x000000FF, 0x222034FF, 0x45283CFF, 0x663931FF, 0x8F563BFF, 0xDF7126FF, 0xD9A066FF, 0xEEC39AFF,
            0xFBF236FF, 0x99E550FF, 0x6ABE30FF, 0x37946EFF, 0x4B692FFF, 0x524B24FF, 0x323C39FF, 0x3F3F74FF,
            0x306082FF, 0x5B6EE1FF, 0x639BFFFF, 0x5FCDE4FF, 0xCBDBFCFF, 0xFFFFFFFF, 0x9BADB7FF, 0x847E87FF,
            0x696A6AFF, 0x595652FF, 0x76428AFF, 0xAC3232FF, 0xD95763FF, 0xD77BBAFF, 0x8F974AFF, 0x8A6F30FF,
    };

    public static final int[] GB = {
            //0x00000000, 0x000000FF, 0x5B5B5BFF, 0xA4A4A4FF, 0xFFFFFFFF,
            0x00000000, 0x252525FF, 0x6E6E6EFF, 0xB6B6B6FF, 0xFFFFFFFF,
    };

    public static final int[] GB_GREEN = {
            0x00000000, 0x081820FF, 0x346856FF, 0x88C070FF, 0xE0F8D0FF
    };
    public static final int[] GRAY16 = {
            0x00000000, 0x010101FF, 0x131313FF, 0x252525FF, 0x373737FF, 0x494949FF, 0x5B5B5BFF, 0x6E6E6EFF,
            0x808080FF, 0x929292FF, 0xA4A4A4FF, 0xB6B6B6FF, 0xC9C9C9FF, 0xDBDBDBFF, 0xEDEDEDFF, 0xFFFFFFFF,
    };
    public static final int[] GRAY8 = {
            0x00000000, 0x131313FF, 0x373737FF, 0x5B5B5BFF, 
            0x808080FF, 0xA4A4A4FF, 0xC9C9C9FF, 0xEDEDEDFF,
    };
    public static final int[] AZURESTAR33 = new int[]{
            0x00000000,
            0x15111BFF, 0x112D19FF, 0x372B26FF, 0x553549FF, 0x45644FFF, 0x6E6550FF, 0xC6B5A5FF, 0xC37C6BFF,
            0xDD997EFF, 0x9A765EFF, 0xEFCBB3FF, 0xE9B58CFF, 0xFFEDD4FF, 0xE1AD56FF, 0xF7DFAAFF, 0xBBD18AFF,
            0x557A41FF, 0x355525FF, 0x62966AFF, 0x86BB9AFF, 0x15452DFF, 0x396A76FF, 0x86A2B7FF, 0x92B3DBFF,
            0x6672BFFF, 0x3D4186FF, 0x9A76BFFF, 0x925EA2FF, 0xC7A2CFFF, 0xA24D72FF, 0xE3A6BBFF, 0xC38E92FF
    };

    // Azurestar33 Ramps
    // organized from darkest to lightest, with the color being adjusted in the second-to-last spot.
    public static final byte[][] AZURESTAR_RAMPS = new byte[][]{
            {0x00, 0x00, 0x00, 0x00,},
            {0x01, 0x01, 0x01, 0x03,},
            {0x01, 0x01, 0x02, 0x15,},
            {0x01, 0x01, 0x03, 0x04,},
            {0x01, 0x03, 0x04, 0x1E,},
            {0x02, 0x15, 0x05, 0x16,},
            {0x01, 0x03, 0x06, 0x0A,},
            {0x0A, 0x20, 0x07, 0x0B,},
            {0x04, 0x1E, 0x08, 0x09,},
            {0x1E, 0x08, 0x09, 0x0C,},
            {0x03, 0x06, 0x0A, 0x08,},
            {0x20, 0x07, 0x0B, 0x0D,},
            {0x08, 0x09, 0x0C, 0x0B,},
            {0x07, 0x0B, 0x0D, 0x0D,},
            {0x06, 0x0A, 0x0E, 0x0C,},
            {0x09, 0x0C, 0x0F, 0x0D,},
            {0x13, 0x14, 0x10, 0x0F,},
            {0x15, 0x12, 0x11, 0x13,},
            {0x02, 0x15, 0x12, 0x11,},
            {0x12, 0x11, 0x13, 0x14,},
            {0x11, 0x13, 0x14, 0x10,},
            {0x01, 0x02, 0x15, 0x05,},
            {0x02, 0x15, 0x16, 0x17,},
            {0x15, 0x16, 0x17, 0x18,},
            {0x15, 0x16, 0x18, 0x0D,},
            {0x01, 0x1A, 0x19, 0x18,},
            {0x01, 0x01, 0x1A, 0x19,},
            {0x04, 0x1E, 0x1B, 0x1D,},
            {0x03, 0x04, 0x1C, 0x1B,},
            {0x1E, 0x1B, 0x1D, 0x1F,},
            {0x03, 0x04, 0x1E, 0x20,},
            {0x0A, 0x20, 0x1F, 0x0B,},
            {0x06, 0x0A, 0x20, 0x1F,},
    };
    /**
     * <a href="https://i.imgur.com/QzvjODC.png">Looks like this</a> (that also shows the ramps).
     */
    public static final int[] SPLAY32 = new int[]{
            0x00000000, 0x383838FF, 0x565E5EFF, 0x808080FF, 0x997274FF, 0x997F72FF, 0x999472FF, 0x729972FF,
            0x727699FF, 0x997298FF, 0x889F9FFF, 0xBCBCBCFF, 0xB0D7D7FF, 0xF2F2F2FF, 0xE59C78FF, 0xBF724CFF,
            0x66493AFF, 0x66603AFF, 0xBFB14CFF, 0xE5D878FF, 0x3A663AFF, 0x4CBF4CFF, 0x78E578FF, 0x3A3F66FF,
            0x4C58BFFF, 0x7883E5FF, 0xBF4CBFFF, 0xE578E5FF, 0x663A65FF, 0x663A3CFF, 0xE5787CFF, 0xBF4C50FF
    };

    // organized from darkest to lightest, with the color being adjusted in the second-to-last spot.
    public static final byte[][] SPLAY_RAMPS = new byte[][]{
            {0x00, 0x00, 0x00, 0x00},
            {0x01, 0x01, 0x01, 0x02},
            {0x01, 0x01, 0x02, 0x03},
            {0x01, 0x02, 0x03, 0x0A},
            {0x01, 0x10, 0x04, 0x05},
            {0x01, 0x10, 0x05, 0x06},
            {0x10, 0x11, 0x06, 0x0B},
            {0x01, 0x14, 0x07, 0x0A},
            {0x01, 0x17, 0x08, 0x03},
            {0x01, 0x1C, 0x09, 0x19},
            {0x02, 0x03, 0x0A, 0x0B},
            {0x03, 0x0A, 0x0B, 0x0D},
            {0x03, 0x0A, 0x0C, 0x0D},
            {0x0A, 0x0B, 0x0D, 0x0D},
            {0x10, 0x0F, 0x0E, 0x0B},
            {0x01, 0x10, 0x0F, 0x0E},
            {0x01, 0x01, 0x10, 0x04},
            {0x01, 0x10, 0x11, 0x06},
            {0x11, 0x06, 0x12, 0x13},
            {0x06, 0x12, 0x13, 0x0D},
            {0x01, 0x01, 0x14, 0x07},
            {0x14, 0x07, 0x15, 0x16},
            {0x07, 0x15, 0x16, 0x0D},
            {0x01, 0x01, 0x17, 0x08},
            {0x01, 0x17, 0x18, 0x19},
            {0x17, 0x18, 0x19, 0x0B},
            {0x01, 0x1C, 0x1A, 0x1B},
            {0x1C, 0x1A, 0x1B, 0x0E},
            {0x01, 0x01, 0x1C, 0x09},
            {0x01, 0x01, 0x1D, 0x10},
            {0x1D, 0x1F, 0x1E, 0x0E},
            {0x01, 0x1D, 0x1F, 0x1E},
    };

    /**
     * A 64-color mix of <a href="https://lospec.com/palette-list/fleja-master-palette">Fleja's Master Palette</a> with
     * <a href="https://lospec.com/palette-list/resurrect-32">Resurrect 32 by Kerrie Lake</a>. Some very similar colors
     * have been removed from the overlap, and the range of green and purple coverage has been expanded. I'd say this is
     * a good option if we want to use less total colors relative to Rinsed or Aurora.
     * <p>
     * This is sorted so the first element is transparent, then indices 1 to 9 are grayscale (or close to it), 10 to 13
     * are brownish-gray and so don't have an especially useful hue, and the rest are sorted by hue (red-green-blue).
     */
    public static final int[] FLESURRECT = {
            0x00000000, 0x1F1833FF, 0x2B2E42FF, 0x3E3546FF,
            0x414859FF, 0x68717AFF, 0x90A1A8FF, 0xB6CBCFFF,
            0xD3E5EDFF, 0xFFFFFFFF, 0x5C3A41FF, 0x826481FF,
            0x966C6CFF, 0x715A56FF, 0xAB947AFF, 0xF68181FF,
            0xF53333FF, 0x5A0A07FF, 0xAE4539FF, 0x8A503EFF,
            0xCD683DFF, 0xFBA458FF, 0xFB6B1DFF, 0xDDBBA4FF,
            0xFDD7AAFF, 0xFFA514FF, 0xC29162FF, 0xE8B710FF,
            0xFBE626FF, 0xC0B510FF, 0xFBFF86FF, 0xB4D645FF,
            0x729446FF, 0xC8E4BEFF, 0x45F520FF, 0x51C43FFF,
            0x0E4904FF, 0x55F084FF, 0x1EBC73FF, 0x30E1B9FF,
            0x7FE0C2FF, 0xB8FDFFFF, 0x039F78FF, 0x63C2C9FF,
            0x216981FF, 0x7FE8F2FF, 0x5369EFFF, 0x4D9BE6FF,
            0x28306FFF, 0x5C76BFFF, 0x4D44C0FF, 0x180FCFFF,
            0x53207DFF, 0x8657CCFF, 0xA884F3FF, 0x630867FF,
            0xA03EB2FF, 0x881AC4FF, 0xE4A8FAFF, 0xB53D86FF,
            0xF34FE9FF, 0x7A3045FF, 0xF04F78FF, 0xC93038FF,
    };

    /**
     * Another one of DawnBringer's palettes, winner of PixelJoint's 2017 22-color palette competition.
     * This has transparent at the start so it has 23 items.
     */
    public static final int[] DB_ISO22 = {
            0x00000000, 0x0C0816FF, 0x4C4138FF, 0x70503AFF,
            0xBC5F4EFF, 0xCE9148FF, 0xE4DA6CFF, 0x90C446FF,
            0x698E34FF, 0x4D613CFF, 0x26323CFF, 0x2C4B73FF,
            0x3C7373FF, 0x558DDEFF, 0x74BAEAFF, 0xF0FAFFFF,
            0xCFB690FF, 0xB67C74FF, 0x845A78FF, 0x555461FF,
            0x746658FF, 0x6B7B89FF, 0x939388FF
    };
    
    public static final int[] JAPANESE_WOODBLOCK = {
            0x00000000, 0x2B2821FF, 0x624C3CFF, 0xD9AC8BFF, 0xE3CFB4FF, 0x243D5CFF, 0x5D7275FF, 0x5C8B93FF,
            0xB1A58DFF, 0xB03A48FF, 0xD4804DFF, 0xE0C872FF, 0x3E6958FF,
    };

    /**
     * https://i.imgur.com/WaMdOEF.png ; I like this one. It uses 8 octahedral blobs in HSV space,
     * distributed around 8 different hues, and centered on a column through grayscale.
     * The darkest color is 0x121111FF, and the lightest color is 0xFFFE92FF (which is very light yellow,
     * oddly; the lightest grayscale color is 0xECE6E0FF).
     */
    public static final int[] ZIGGURAT64 =
        new int[] {
            0x00000000, 0x121111FF, 0x363533FF, 0x38263BFF, 0x3C262BFF, 0x293C26FF, 0x25283EFF, 0x422C2AFF,
            0x2B4242FF, 0x492E2CFF, 0x4F4F2FFF, 0x5B5856FF, 0x5A445FFF, 0x60444BFF, 0x476044FF, 0x444764FF,
            0x6B4E4BFF, 0x4C6B6AFF, 0x75524FFF, 0x7F7C79FF, 0x7F7F56FF, 0xA39F9BFF, 0xC8C3BEFF, 0xECE6E0FF,
            0xA15A54FF, 0x935853FF, 0xDB655BFF, 0x7F4641FF, 0xFF9B92FF, 0xBE7D77FF, 0xC8675DFF, 0xF09C93FF,
            0x8B6241FF, 0xCFB282FF, 0xEFED63FF, 0xAFAE5BFF, 0xFFFE92FF, 0x7B9746FF, 0x819D68FF, 0x60B554FF,
            0x8FDA85FF, 0x51854BFF, 0x3B734DFF, 0x74AE93FF, 0x559391FF, 0x96F0EEFF, 0x61C8C6FF, 0x436A7FFF,
            0x6683A3FF, 0x4E59BCFF, 0x828BE2FF, 0x484E8AFF, 0x493877FF, 0x7F689BFF, 0xC886D7FF, 0xA256B3FF,
            0x794C83FF, 0x713C67FF, 0x9D6888FF, 0xB5546CFF, 0x854B59FF, 0xDA8599FF, 0x733B41FF, 0xAE7375FF
        };
    ////ZIGGURAT64 Ramps
    public static final byte[][] ZIGGURAT_RAMPS = {
        {0x00, 0x00, 0x00, 0x00},
        {0x01, 0x01, 0x01, 0x02},
        {0x01, 0x04, 0x02, 0x08},
        {0x01, 0x01, 0x03, 0x0C},
        {0x01, 0x01, 0x04, 0x07},
        {0x01, 0x01, 0x05, 0x0E},
        {0x01, 0x01, 0x06, 0x03},
        {0x01, 0x01, 0x07, 0x09},
        {0x01, 0x01, 0x08, 0x11},
        {0x01, 0x04, 0x09, 0x0D},
        {0x01, 0x05, 0x0A, 0x0E},
        {0x04, 0x02, 0x0B, 0x13},
        {0x01, 0x03, 0x0C, 0x3A},
        {0x04, 0x09, 0x0D, 0x10},
        {0x01, 0x05, 0x0E, 0x2A},
        {0x01, 0x06, 0x0F, 0x2F},
        {0x04, 0x09, 0x10, 0x12},
        {0x01, 0x08, 0x11, 0x2C},
        {0x09, 0x0D, 0x12, 0x19},
        {0x02, 0x0B, 0x13, 0x15},
        {0x05, 0x0A, 0x14, 0x26},
        {0x0B, 0x13, 0x15, 0x16},
        {0x13, 0x15, 0x16, 0x17},
        {0x15, 0x16, 0x17, 0x24},
        {0x09, 0x1B, 0x18, 0x1D},
        {0x09, 0x1B, 0x19, 0x3F},
        {0x1B, 0x18, 0x1A, 0x1C},
        {0x04, 0x09, 0x1B, 0x19},
        {0x18, 0x1E, 0x1C, 0x16},
        {0x1B, 0x18, 0x1D, 0x1F},
        {0x1B, 0x18, 0x1E, 0x1C},
        {0x18, 0x1D, 0x1F, 0x16},
        {0x09, 0x1B, 0x20, 0x1D},
        {0x0A, 0x14, 0x21, 0x16},
        {0x25, 0x23, 0x22, 0x24},
        {0x29, 0x25, 0x23, 0x21},
        {0x25, 0x23, 0x24, 0x17},
        {0x0E, 0x29, 0x25, 0x23},
        {0x0E, 0x29, 0x26, 0x2B},
        {0x0E, 0x29, 0x27, 0x28},
        {0x29, 0x27, 0x28, 0x24},
        {0x05, 0x0E, 0x29, 0x26},
        {0x01, 0x05, 0x2A, 0x29},
        {0x11, 0x2C, 0x2B, 0x2E},
        {0x08, 0x11, 0x2C, 0x2B},
        {0x2C, 0x2E, 0x2D, 0x24},
        {0x11, 0x2C, 0x2E, 0x2D},
        {0x06, 0x0F, 0x2F, 0x30},
        {0x0F, 0x2F, 0x30, 0x15},
        {0x03, 0x34, 0x31, 0x32},
        {0x38, 0x35, 0x32, 0x15},
        {0x03, 0x34, 0x33, 0x35},
        {0x01, 0x03, 0x34, 0x33},
        {0x34, 0x38, 0x35, 0x32},
        {0x38, 0x37, 0x36, 0x1F},
        {0x34, 0x38, 0x37, 0x36},
        {0x03, 0x34, 0x38, 0x35},
        {0x01, 0x03, 0x39, 0x38},
        {0x3E, 0x3C, 0x3A, 0x3F},
        {0x3E, 0x3C, 0x3B, 0x3D},
        {0x09, 0x3E, 0x3C, 0x19},
        {0x3C, 0x3B, 0x3D, 0x1F},
        {0x04, 0x09, 0x3E, 0x1B},
        {0x1B, 0x19, 0x3F, 0x1D},
    };
    /**
     * Manually-edited version of the 64-color Dawnplumnik palette, which was made by combining DawnBringer's Iso22
     * bman4750's Super Plum 21, and Vinik's Vinik24. Has better gray, orange, yellow, and brown coverage, and reduced
     * cyan coverage (which was very heavy originally). <a href="https://i.imgur.com/es1zfEU.png">Image preview</a>.
     */
    public static final int[] MANOS64 = {
            0x00000000, 0x19092DFF, 0x213118FF, 0x314A29FF, 0x8C847BFF, 0x6E868EFF, 0x9CA59CFF, 0xAFC7CFFF,
            0xD6F7D6FF, 0xFBD7EBFF, 0xFDFBE3FF, 0xE73129FF, 0x7B2921FF, 0xE79C94FF, 0xBF4529FF, 0xE35A00FF,
            0xAD6329FF, 0xE78431FF, 0x4A2D11FF, 0xD39A5EFF, 0xFFAA4DFF, 0xF7CF9EFF, 0xA58C29FF, 0xFBE76AFF,
            0xBDB573FF, 0x6B7321FF, 0x8CAD29FF, 0xC7FF2DFF, 0x96DF1DFF, 0xBFEF94FF, 0x296318FF, 0x62FF39FF,
            0x39C621FF, 0x319421FF, 0x4AEF31FF, 0x39AD5AFF, 0x49FF8AFF, 0x319E7AFF, 0x296B5AFF, 0x49B39AFF,
            0x52F7DEFF, 0xA5DEDEFF, 0x39BDC6FF, 0x52CEEFFF, 0x42A5C6FF, 0x396B9CFF, 0x29426BFF, 0x394ABDFF,
            0x2910DEFF, 0x29189CFF, 0x21105AFF, 0x6329E7FF, 0x9C84CEFF, 0x8A49DBFF, 0xCEADE7FF, 0x9C29B5FF,
            0x6B1873FF, 0xD631DEFF, 0xE773D6FF, 0xA52973FF, 0xE7298CFF, 0xCF1562FF, 0x845A6BFF, 0xD66B7BFF,

            0x000000FF, 0x19092DFF, 0x213118FF, 0x314A29FF, 0x8C847BFF, 0x6E868EFF, 0x9CA59CFF, 0xAFC7CFFF,
            0xD6F7D6FF, 0xFBD7EBFF, 0xFDFBE3FF, 0xE73129FF, 0x7B2921FF, 0xE79C94FF, 0xBF4529FF, 0xE35A00FF,
            0xAD6329FF, 0xE78431FF, 0x4A2D1100, 0xD39A5EFF, 0xFFAA4DFF, 0xF7CF9EFF, 0xA58C29FF, 0xFBE76AFF,
            0xBDB573FF, 0x6B7321FF, 0x8CAD2900, 0xC7FF2DFF, 0x96DF1DFF, 0xBFEF94FF, 0x296318FF, 0x62FF39FF,
            0x39C62100, 0x319421FF, 0x4AEF31FF, 0x39AD5A00, 0x49FF8A00, 0x319E7AFF, 0x296B5AFF, 0x49B39A00,
            0x52F7DEFF, 0xA5DEDEFF, 0x39BDC6FF, 0x52CEEFFF, 0x42A5C6FF, 0x396B9CFF, 0x29426B00, 0x394ABDFF,
            0x2910DEFF, 0x29189C00, 0x21105AFF, 0x6329E7FF, 0x9C84CEFF, 0x8A49DB00, 0xCEADE7FF, 0x9C29B5FF,
            0x6B1873FF, 0xD631DE00, 0xE773D600, 0xA52973FF, 0xE7298CFF, 0xCF1562FF, 0x845A6B00, 0xD66B7BFF,

            0x00000000, 0x19092DFF, 0x213118FF, 0x314A29FF, 0x8C847BFF, 0x6E868EFF, 0x9CA59CFF, 0xAFC7CFFF,
            0xD6F7D6FF, 0xFBD7EBFF, 0xFDFBE3FF, 0xE73129FF, 0x7B2921FF, 0xE79C94FF, 0xBF4529FF, 0xE35A00FF,
            0xAD6329FF, 0xE78431FF, 0x4A2D11FF, 0xD39A5EFF, 0xFFAA4DFF, 0xF7CF9EFF, 0xA58C29FF, 0xFBE76AFF,
            0xBDB573FF, 0x6B7321FF, 0x8CAD29FF, 0xC7FF2DFF, 0x96DF1DFF, 0xBFEF94FF, 0x296318FF, 0x62FF39FF,
            0x39C621FF, 0x319421FF, 0x4AEF31FF, 0x39AD5AFF, 0x49FF8AFF, 0x319E7AFF, 0x296B5AFF, 0x49B39AFF,
            0x52F7DEFF, 0xA5DEDEFF, 0x39BDC6FF, 0x52CEEFFF, 0x42A5C6FF, 0x396B9CFF, 0x29426BFF, 0x394ABDFF,
            0x2910DEFF, 0x29189CFF, 0x21105AFF, 0x6329E7FF, 0x9C84CEFF, 0x8A49DBFF, 0xCEADE7FF, 0x9C29B5FF,
            0x6B1873FF, 0xD631DEFF, 0xE773D6FF, 0xA52973FF, 0xE7298CFF, 0xCF1562FF, 0x845A6BFF, 0xD66B7BFF,

            0x00000000, 0x19092DFF, 0x213118FF, 0x314A29FF, 0x8C847BFF, 0x6E868EFF, 0x9CA59CFF, 0xAFC7CFFF,
            0xD6F7D6FF, 0xFBD7EBFF, 0xFDFBE3FF, 0xE73129FF, 0x7B2921FF, 0xE79C94FF, 0xBF4529FF, 0xE35A00FF,
            0xAD6329FF, 0xE78431FF, 0x4A2D11FF, 0xD39A5EFF, 0xFFAA4DFF, 0xF7CF9EFF, 0xA58C29FF, 0xFBE76AFF,
            0xBDB573FF, 0x6B7321FF, 0x8CAD29FF, 0xC7FF2DFF, 0x96DF1DFF, 0xBFEF94FF, 0x296318FF, 0x62FF39FF,
            0x39C621FF, 0x319421FF, 0x4AEF31FF, 0x39AD5AFF, 0x49FF8AFF, 0x319E7AFF, 0x296B5AFF, 0x49B39AFF,
            0x52F7DEFF, 0xA5DEDEFF, 0x39BDC6FF, 0x52CEEFFF, 0x42A5C6FF, 0x396B9CFF, 0x29426BFF, 0x394ABDFF,
            0x2910DEFF, 0x29189CFF, 0x21105AFF, 0x6329E7FF, 0x9C84CEFF, 0x8A49DBFF, 0xCEADE7FF, 0x9C29B5FF,
            0x6B1873FF, 0xD631DEFF, 0xE773D6FF, 0xA52973FF, 0xE7298CFF, 0xCF1562FF, 0x845A6BFF, 0xD66B7BFF,

    };
    public static final byte[][] MANOS_RAMPS = {
            {0x00, 0x00, 0x00, 0x00},
            {0x01, 0x01, 0x01, 0x2E},
            {0x01, 0x01, 0x02, 0x03},
            {0x01, 0x02, 0x03, 0x26},
            {0x2E, 0x3E, 0x04, 0x06},
            {0x03, 0x26, 0x05, 0x06},
            {0x3E, 0x04, 0x06, 0x07},
            {0x04, 0x06, 0x07, 0x29},
            {0x2A, 0x29, 0x08, 0x0A},
            {0x06, 0x07, 0x09, 0x0A},
            {0x18, 0x15, 0x0A, 0x0A},
            {0x12, 0x0C, 0x0B, 0x0F},
            {0x01, 0x12, 0x0C, 0x0E},
            {0x0C, 0x3F, 0x0D, 0x15},
            {0x12, 0x0C, 0x0E, 0x0B},
            {0x0C, 0x0E, 0x0F, 0x11},
            {0x12, 0x0C, 0x10, 0x13},
            {0x0C, 0x10, 0x11, 0x14},
            {0x01, 0x01, 0x12, 0x0C},
            {0x0C, 0x10, 0x13, 0x15},
            {0x10, 0x11, 0x14, 0x15},
            {0x16, 0x18, 0x15, 0x0A},
            {0x1E, 0x19, 0x16, 0x18},
            {0x19, 0x16, 0x17, 0x08},
            {0x19, 0x16, 0x18, 0x15},
            {0x03, 0x1E, 0x19, 0x16},
            {0x1E, 0x21, 0x1A, 0x1D},
            {0x20, 0x1C, 0x1B, 0x0A},
            {0x21, 0x20, 0x1C, 0x1B},
            {0x21, 0x1A, 0x1D, 0x08},
            {0x02, 0x03, 0x1E, 0x19},
            {0x21, 0x20, 0x1F, 0x1B},
            {0x1E, 0x21, 0x20, 0x22},
            {0x03, 0x1E, 0x21, 0x23},
            {0x21, 0x20, 0x22, 0x1F},
            {0x1E, 0x21, 0x23, 0x1D},
            {0x21, 0x20, 0x24, 0x1B},
            {0x03, 0x26, 0x25, 0x27},
            {0x02, 0x03, 0x26, 0x25},
            {0x03, 0x26, 0x27, 0x2A},
            {0x26, 0x27, 0x28, 0x08},
            {0x25, 0x2A, 0x29, 0x08},
            {0x26, 0x25, 0x2A, 0x2B},
            {0x05, 0x2C, 0x2B, 0x29},
            {0x26, 0x05, 0x2C, 0x2B},
            {0x01, 0x2E, 0x2D, 0x2C},
            {0x01, 0x01, 0x2E, 0x2D},
            {0x32, 0x31, 0x2F, 0x2D},
            {0x32, 0x31, 0x30, 0x2F},
            {0x01, 0x32, 0x31, 0x2F},
            {0x01, 0x01, 0x32, 0x2E},
            {0x32, 0x31, 0x33, 0x35},
            {0x01, 0x38, 0x34, 0x36},
            {0x01, 0x38, 0x35, 0x34},
            {0x38, 0x34, 0x36, 0x09},
            {0x01, 0x38, 0x37, 0x3A},
            {0x01, 0x01, 0x38, 0x3B},
            {0x38, 0x37, 0x39, 0x3A},
            {0x38, 0x37, 0x3A, 0x36},
            {0x01, 0x38, 0x3B, 0x3C},
            {0x38, 0x3B, 0x3C, 0x3A},
            {0x12, 0x0C, 0x3D, 0x3F},
            {0x01, 0x2E, 0x3E, 0x04},
            {0x12, 0x0C, 0x3F, 0x0D},
    };

    /**
     * A hefty addition to {@link #MANOS64}, this keeps the first 64 items the same as MANOS64, and appends 192 colors
     * that are all different enough from existing ones. This is meant to be used for remapping the 63 opaque colors in
     * MANOS64 to any of 255 opaque colors here, using this larger palette for a whole work (256 colors are more than
     * enough for almost any pixel art).
     */
    public static final int[] MANOSSUS256 = new int[] {
            0x00000000, 0x19092DFF, 0x213118FF, 0x314A29FF, 0x8C847BFF, 0x6E868EFF, 0x9CA59CFF, 0xAFC7CFFF,
            0xD6F7D6FF, 0xFBD7EBFF, 0xFDFBE3FF, 0xE73129FF, 0x7B2921FF, 0xE79C94FF, 0xBF4529FF, 0xE35A00FF,
            0xAD6329FF, 0xE78431FF, 0x4A2D11FF, 0xD39A5EFF, 0xFFAA4DFF, 0xF7CF9EFF, 0xA58C29FF, 0xFBE76AFF,
            0xBDB573FF, 0x6B7321FF, 0x8CAD29FF, 0xC7FF2DFF, 0x96DF1DFF, 0xBFEF94FF, 0x296318FF, 0x62FF39FF,
            0x39C621FF, 0x319421FF, 0x4AEF31FF, 0x39AD5AFF, 0x49FF8AFF, 0x319E7AFF, 0x296B5AFF, 0x49B39AFF,
            0x52F7DEFF, 0xA5DEDEFF, 0x39BDC6FF, 0x52CEEFFF, 0x42A5C6FF, 0x396B9CFF, 0x29426BFF, 0x394ABDFF,
            0x2910DEFF, 0x29189CFF, 0x21105AFF, 0x6329E7FF, 0x9C84CEFF, 0x8A49DBFF, 0xCEADE7FF, 0x9C29B5FF,
            0x6B1873FF, 0xD631DEFF, 0xE773D6FF, 0xA52973FF, 0xE7298CFF, 0xCF1562FF, 0x845A6BFF, 0xD66B7BFF,
            0x16210BFF, 0x232323FF, 0x082423FF, 0x2C0613FF, 0x353535FF, 0x474747FF, 0x595959FF, 0x3C505BFF,
            0x6B6B6BFF, 0x537166FF, 0x4C724AFF, 0x78795EFF, 0x809D81FF, 0xB3B3B3FF, 0xD7D7D7FF, 0xBBB2D9FF,
            0xE9E9E9FF, 0xC86160FF, 0xD08684FF, 0xD8ABA8FF, 0x8B1005FF, 0xC61300FF, 0xED6858FF, 0x933529FF,
            0xF58D7CFF, 0x9C5A4DFF, 0xFB6440FF, 0xFDB2A0FF, 0xA23111FF, 0xC73908FF, 0xA47F71FF, 0xAA5635FF,
            0xCF5E2CFF, 0x672F16FF, 0xD78350FF, 0xD1AB8CFF, 0xB15301FF, 0x70543AFF, 0xE0A874FF, 0xEEA45CFF,
            0x7E5022FF, 0xBA7825FF, 0xAB7C3DFF, 0xF5A128FF, 0xFEC64CFF, 0xC29D48FF, 0xEFCA64FF, 0x867545FF,
            0xC99A14FF, 0xDAD0B0FF, 0xB4A161FF, 0x8E7211FF, 0x52490EFF, 0xD2BF38FF, 0xCBC26CFF, 0xF0DE10FF,
            0x969735FF, 0xF0F2BCFF, 0xDAE45CFF, 0xA6B925FF, 0xBCC685FF, 0x9FD005FF, 0xAEDE49FF, 0x6A9022FF,
            0x63A702FF, 0x99F841FF, 0x7BEE16FF, 0x64CD0AFF, 0x90BF71FF, 0x72B546FF, 0x45892AFF, 0x29A407FF,
            0x639356FF, 0x97BF8DFF, 0x46AF32FF, 0x7BDA6AFF, 0x98E495FF, 0x66F562FF, 0x013B03FF, 0x4FD456FF,
            0x07FF1BFF, 0x83FF8DFF, 0x378D43FF, 0x6BB87AFF, 0x0B862FFF, 0x06EB6FFF, 0x1BD077FF, 0x24F59BFF,
            0x31B57FFF, 0x65E1B6FF, 0x39DAA3FF, 0x41FFC6FF, 0x038963FF, 0x2F9077FF, 0x7AC6BEFF, 0x83EBE1FF,
            0x06D7C3FF, 0x104947FF, 0x21938FFF, 0xAFF2F5FF, 0x23E1EFFF, 0x4D9AA2FF, 0x81C5D9FF, 0x14BFFFFF,
            0x367997FF, 0x0B9ADBFF, 0x6BA4CEFF, 0x3D78B3FF, 0x207FE3FF, 0x012757FF, 0x0F243FFF, 0x627FAAFF,
            0x185ABFFF, 0x2757A7FF, 0x4C86F6FF, 0xC4D7FCFF, 0x88AEF9FF, 0x115DF3FF, 0x0838CFFF, 0x4461D2FF,
            0x1E3283FF, 0x1735B7FF, 0x2643FBFF, 0x626BFEFF, 0x353FE3FF, 0x5A5A86FF, 0x2C1ABFFF, 0x8E86BDFF,
            0x4A3896FF, 0x7765B2FF, 0x7F64CEFF, 0x6843C2FF, 0xAC90E9FF, 0x9C6EF9FF, 0x762BFEFF, 0x5F0AF2FF,
            0x421372FF, 0x5F1E9EFF, 0x7D28CAFF, 0xC175F0FF, 0x513562FF, 0xA36BC5FF, 0xD897FCFF, 0x7503A6FF,
            0xC050E8FF, 0xBE14E5FF, 0x50105AFF, 0xB82BC5FF, 0xE8B9ECFF, 0x9B46A1FF, 0xEA1AF8FF, 0x9A2099FF,
            0xE557E0FF, 0xAF06A1FF, 0xF917E0FF, 0x7E3C76FF, 0xFC78ECFF, 0xC74DB4FF, 0xDC32BCFF, 0x49103EFF,
            0x93217DFF, 0xF353C8FF, 0xD40D98FF, 0xBF2891FF, 0xDF94C8FF, 0xAA4289FF, 0x945D81FF, 0x751752FF,
            0xB6036DFF, 0xD6499CFF, 0x60324AFF, 0xD76FA4FF, 0x8C385DFF, 0xFA5094FF, 0xF22B70FF, 0xEE90B0FF,
            0xB01A4DFF, 0x841339FF, 0xC2899CFF, 0x580D26FF, 0xEA064CFF, 0xB96479FF, 0xDD4668FF, 0xF80334FF,
            0xD52144FF, 0xB13F55FF, 0xA81A31FF, 0xF46774FF, 0xEB4250FF, 0x66090EFF, 0xB71719FF, 0xBF3C3DFF,
    };
    
    public static final byte[][] MANOSSUS_RAMPS = new byte[][] {
            new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00},
            new byte[]{(byte)0x01, (byte)0x43, (byte)0x01, (byte)0xAE},
            new byte[]{(byte)0x43, (byte)0x40, (byte)0x02, (byte)0x03},
            new byte[]{(byte)0x40, (byte)0x02, (byte)0x03, (byte)0x4A},
            new byte[]{(byte)0x46, (byte)0x48, (byte)0x04, (byte)0x06},
            new byte[]{(byte)0x46, (byte)0x48, (byte)0x05, (byte)0x06},
            new byte[]{(byte)0x48, (byte)0x04, (byte)0x06, (byte)0x4D},
            new byte[]{(byte)0x04, (byte)0x06, (byte)0x07, (byte)0x4E},
            new byte[]{(byte)0x63, (byte)0x71, (byte)0x08, (byte)0x0A},
            new byte[]{(byte)0xF2, (byte)0x53, (byte)0x09, (byte)0x0A},
            new byte[]{(byte)0x63, (byte)0x71, (byte)0x0A, (byte)0x0A},
            new byte[]{(byte)0x54, (byte)0x55, (byte)0x0B, (byte)0x5A},
            new byte[]{(byte)0x43, (byte)0xFD, (byte)0x0C, (byte)0x57},
            new byte[]{(byte)0xF5, (byte)0x52, (byte)0x0D, (byte)0x5B},
            new byte[]{(byte)0x54, (byte)0x5C, (byte)0x0E, (byte)0x60},
            new byte[]{(byte)0x5C, (byte)0x5D, (byte)0x0F, (byte)0x5A},
            new byte[]{(byte)0x61, (byte)0x68, (byte)0x10, (byte)0x62},
            new byte[]{(byte)0x5C, (byte)0x64, (byte)0x11, (byte)0x14},
            new byte[]{(byte)0x43, (byte)0x40, (byte)0x12, (byte)0x65},
            new byte[]{(byte)0x68, (byte)0x6A, (byte)0x13, (byte)0x66},
            new byte[]{(byte)0x64, (byte)0x11, (byte)0x14, (byte)0x6C},
            new byte[]{(byte)0x6A, (byte)0x66, (byte)0x15, (byte)0x79},
            new byte[]{(byte)0x74, (byte)0x73, (byte)0x16, (byte)0x6D},
            new byte[]{(byte)0x70, (byte)0x75, (byte)0x17, (byte)0x79},
            new byte[]{(byte)0x19, (byte)0x78, (byte)0x18, (byte)0x7C},
            new byte[]{(byte)0x12, (byte)0x74, (byte)0x19, (byte)0x78},
            new byte[]{(byte)0x19, (byte)0x7F, (byte)0x1A, (byte)0x7B},
            new byte[]{(byte)0x80, (byte)0x1C, (byte)0x1B, (byte)0x0A},
            new byte[]{(byte)0x86, (byte)0x80, (byte)0x1C, (byte)0x81},
            new byte[]{(byte)0x88, (byte)0x84, (byte)0x1D, (byte)0x79},
            new byte[]{(byte)0x40, (byte)0x8E, (byte)0x1E, (byte)0x86},
            new byte[]{(byte)0x87, (byte)0x20, (byte)0x1F, (byte)0x1B},
            new byte[]{(byte)0x94, (byte)0x87, (byte)0x20, (byte)0x83},
            new byte[]{(byte)0x8E, (byte)0x1E, (byte)0x21, (byte)0x8A},
            new byte[]{(byte)0x87, (byte)0x20, (byte)0x22, (byte)0x1F},
            new byte[]{(byte)0x1E, (byte)0x94, (byte)0x23, (byte)0x96},
            new byte[]{(byte)0x8A, (byte)0x8F, (byte)0x24, (byte)0x1B},
            new byte[]{(byte)0x26, (byte)0x9C, (byte)0x25, (byte)0x27},
            new byte[]{(byte)0x42, (byte)0xA1, (byte)0x26, (byte)0x49},
            new byte[]{(byte)0x26, (byte)0x9D, (byte)0x27, (byte)0x9E},
            new byte[]{(byte)0x27, (byte)0xA0, (byte)0x28, (byte)0x08},
            new byte[]{(byte)0x27, (byte)0x9E, (byte)0x29, (byte)0xA3},
            new byte[]{(byte)0xA8, (byte)0xA5, (byte)0x2A, (byte)0xA4},
            new byte[]{(byte)0xA8, (byte)0x2C, (byte)0x2B, (byte)0xA4},
            new byte[]{(byte)0x47, (byte)0xA8, (byte)0x2C, (byte)0x2B},
            new byte[]{(byte)0xAD, (byte)0x2E, (byte)0x2D, (byte)0xAB},
            new byte[]{(byte)0x01, (byte)0xAD, (byte)0x2E, (byte)0xBD},
            new byte[]{(byte)0x31, (byte)0xB9, (byte)0x2F, (byte)0xB7},
            new byte[]{(byte)0x32, (byte)0x31, (byte)0x30, (byte)0xC7},
            new byte[]{(byte)0x01, (byte)0x32, (byte)0x31, (byte)0xB9},
            new byte[]{(byte)0x43, (byte)0x01, (byte)0x32, (byte)0xC8},
            new byte[]{(byte)0x31, (byte)0x30, (byte)0x33, (byte)0xC6},
            new byte[]{(byte)0xB1, (byte)0xC1, (byte)0x34, (byte)0xC4},
            new byte[]{(byte)0xCF, (byte)0xCA, (byte)0x35, (byte)0xC5},
            new byte[]{(byte)0xBD, (byte)0xBF, (byte)0x36, (byte)0xD4},
            new byte[]{(byte)0x31, (byte)0xCF, (byte)0x37, (byte)0xD3},
            new byte[]{(byte)0xDF, (byte)0xD2, (byte)0x38, (byte)0xE0},
            new byte[]{(byte)0xCF, (byte)0x37, (byte)0x39, (byte)0xDA},
            new byte[]{(byte)0xD7, (byte)0xDD, (byte)0x3A, (byte)0xDC},
            new byte[]{(byte)0xDF, (byte)0xE7, (byte)0x3B, (byte)0xE5},
            new byte[]{(byte)0xE7, (byte)0xE8, (byte)0x3C, (byte)0xED},
            new byte[]{(byte)0x54, (byte)0xFA, (byte)0x3D, (byte)0xEE},
            new byte[]{(byte)0xDF, (byte)0xEA, (byte)0x3E, (byte)0xE6},
            new byte[]{(byte)0xF1, (byte)0xF9, (byte)0x3F, (byte)0xFB},
            new byte[]{(byte)0x01, (byte)0x43, (byte)0x40, (byte)0x02},
            new byte[]{(byte)0x43, (byte)0x40, (byte)0x41, (byte)0x44},
            new byte[]{(byte)0x01, (byte)0x43, (byte)0x42, (byte)0x41},
            new byte[]{(byte)0x43, (byte)0x01, (byte)0x43, (byte)0xEA},
            new byte[]{(byte)0x40, (byte)0x41, (byte)0x44, (byte)0x45},
            new byte[]{(byte)0x41, (byte)0x44, (byte)0x45, (byte)0x46},
            new byte[]{(byte)0x44, (byte)0x45, (byte)0x46, (byte)0x48},
            new byte[]{(byte)0x41, (byte)0x44, (byte)0x47, (byte)0x46},
            new byte[]{(byte)0x45, (byte)0x46, (byte)0x48, (byte)0x04},
            new byte[]{(byte)0x45, (byte)0x46, (byte)0x49, (byte)0x05},
            new byte[]{(byte)0x02, (byte)0x03, (byte)0x4A, (byte)0x88},
            new byte[]{(byte)0x12, (byte)0x65, (byte)0x4B, (byte)0x04},
            new byte[]{(byte)0x65, (byte)0x4B, (byte)0x4C, (byte)0x06},
            new byte[]{(byte)0x48, (byte)0x04, (byte)0x4D, (byte)0x4E},
            new byte[]{(byte)0x04, (byte)0x4D, (byte)0x4E, (byte)0x50},
            new byte[]{(byte)0xBD, (byte)0xBF, (byte)0x4F, (byte)0xB3},
            new byte[]{(byte)0x06, (byte)0x07, (byte)0x50, (byte)0x0A},
            new byte[]{(byte)0xF1, (byte)0xF9, (byte)0x51, (byte)0x3F},
            new byte[]{(byte)0xEC, (byte)0xF5, (byte)0x52, (byte)0x0D},
            new byte[]{(byte)0xF5, (byte)0xF2, (byte)0x53, (byte)0x5B},
            new byte[]{(byte)0x43, (byte)0xFD, (byte)0x54, (byte)0x5C},
            new byte[]{(byte)0xFD, (byte)0x54, (byte)0x55, (byte)0x0B},
            new byte[]{(byte)0xFA, (byte)0xFF, (byte)0x56, (byte)0x58},
            new byte[]{(byte)0xFD, (byte)0x0C, (byte)0x57, (byte)0x5F},
            new byte[]{(byte)0xF9, (byte)0x51, (byte)0x58, (byte)0x5B},
            new byte[]{(byte)0xFD, (byte)0x0C, (byte)0x59, (byte)0x52},
            new byte[]{(byte)0x5C, (byte)0x5D, (byte)0x5A, (byte)0x11},
            new byte[]{(byte)0xF5, (byte)0x52, (byte)0x5B, (byte)0x15},
            new byte[]{(byte)0xFD, (byte)0x54, (byte)0x5C, (byte)0x0E},
            new byte[]{(byte)0x54, (byte)0x5C, (byte)0x5D, (byte)0x0F},
            new byte[]{(byte)0x12, (byte)0x65, (byte)0x5E, (byte)0x53},
            new byte[]{(byte)0x0C, (byte)0x57, (byte)0x5F, (byte)0x10},
            new byte[]{(byte)0x54, (byte)0x5C, (byte)0x60, (byte)0x5A},
            new byte[]{(byte)0x40, (byte)0x12, (byte)0x61, (byte)0x0C},
            new byte[]{(byte)0x68, (byte)0x10, (byte)0x62, (byte)0x67},
            new byte[]{(byte)0x65, (byte)0x5E, (byte)0x63, (byte)0x15},
            new byte[]{(byte)0x54, (byte)0x5C, (byte)0x64, (byte)0x60},
            new byte[]{(byte)0x40, (byte)0x12, (byte)0x65, (byte)0x6F},
            new byte[]{(byte)0x68, (byte)0x6A, (byte)0x66, (byte)0x15},
            new byte[]{(byte)0x10, (byte)0x62, (byte)0x67, (byte)0x14},
            new byte[]{(byte)0x12, (byte)0x61, (byte)0x68, (byte)0x6A},
            new byte[]{(byte)0x5C, (byte)0x64, (byte)0x69, (byte)0x67},
            new byte[]{(byte)0x61, (byte)0x68, (byte)0x6A, (byte)0x13},
            new byte[]{(byte)0x64, (byte)0x11, (byte)0x6B, (byte)0x14},
            new byte[]{(byte)0x69, (byte)0x70, (byte)0x6C, (byte)0x17},
            new byte[]{(byte)0x68, (byte)0x6A, (byte)0x6D, (byte)0x6E},
            new byte[]{(byte)0x6A, (byte)0x6D, (byte)0x6E, (byte)0x17},
            new byte[]{(byte)0x12, (byte)0x65, (byte)0x6F, (byte)0x72},
            new byte[]{(byte)0x64, (byte)0x69, (byte)0x70, (byte)0x6C},
            new byte[]{(byte)0x5E, (byte)0x63, (byte)0x71, (byte)0x0A},
            new byte[]{(byte)0x65, (byte)0x6F, (byte)0x72, (byte)0x18},
            new byte[]{(byte)0x12, (byte)0x74, (byte)0x73, (byte)0x16},
            new byte[]{(byte)0x40, (byte)0x12, (byte)0x74, (byte)0x6F},
            new byte[]{(byte)0x69, (byte)0x70, (byte)0x75, (byte)0x17},
            new byte[]{(byte)0x6F, (byte)0x72, (byte)0x76, (byte)0x6E},
            new byte[]{(byte)0x70, (byte)0x75, (byte)0x77, (byte)0x17},
            new byte[]{(byte)0x74, (byte)0x19, (byte)0x78, (byte)0x76},
            new byte[]{(byte)0x63, (byte)0x71, (byte)0x79, (byte)0x0A},
            new byte[]{(byte)0x7F, (byte)0x7B, (byte)0x7A, (byte)0x17},
            new byte[]{(byte)0x19, (byte)0x7F, (byte)0x7B, (byte)0x7A},
            new byte[]{(byte)0x6F, (byte)0x72, (byte)0x7C, (byte)0x79},
            new byte[]{(byte)0x86, (byte)0x80, (byte)0x7D, (byte)0x1C},
            new byte[]{(byte)0x7F, (byte)0x7B, (byte)0x7E, (byte)0x7A},
            new byte[]{(byte)0x74, (byte)0x19, (byte)0x7F, (byte)0x1A},
            new byte[]{(byte)0x1E, (byte)0x86, (byte)0x80, (byte)0x85},
            new byte[]{(byte)0x87, (byte)0x83, (byte)0x81, (byte)0x1B},
            new byte[]{(byte)0x87, (byte)0x83, (byte)0x82, (byte)0x81},
            new byte[]{(byte)0x94, (byte)0x87, (byte)0x83, (byte)0x81},
            new byte[]{(byte)0x4A, (byte)0x88, (byte)0x84, (byte)0x8C},
            new byte[]{(byte)0x1E, (byte)0x21, (byte)0x85, (byte)0x8B},
            new byte[]{(byte)0x8E, (byte)0x1E, (byte)0x86, (byte)0x7F},
            new byte[]{(byte)0x1E, (byte)0x94, (byte)0x87, (byte)0x8A},
            new byte[]{(byte)0x03, (byte)0x4A, (byte)0x88, (byte)0x93},
            new byte[]{(byte)0x4B, (byte)0x4C, (byte)0x89, (byte)0x7C},
            new byte[]{(byte)0x1E, (byte)0x21, (byte)0x8A, (byte)0x8F},
            new byte[]{(byte)0x21, (byte)0x85, (byte)0x8B, (byte)0x91},
            new byte[]{(byte)0x88, (byte)0x84, (byte)0x8C, (byte)0x1D},
            new byte[]{(byte)0x8A, (byte)0x8F, (byte)0x8D, (byte)0x91},
            new byte[]{(byte)0x43, (byte)0x40, (byte)0x8E, (byte)0x1E},
            new byte[]{(byte)0x21, (byte)0x8A, (byte)0x8F, (byte)0x8D},
            new byte[]{(byte)0x87, (byte)0x20, (byte)0x90, (byte)0x1B},
            new byte[]{(byte)0x85, (byte)0x8B, (byte)0x91, (byte)0x08},
            new byte[]{(byte)0x8E, (byte)0x1E, (byte)0x92, (byte)0x23},
            new byte[]{(byte)0x4A, (byte)0x88, (byte)0x93, (byte)0x84},
            new byte[]{(byte)0x8E, (byte)0x1E, (byte)0x94, (byte)0x92},
            new byte[]{(byte)0x23, (byte)0x96, (byte)0x95, (byte)0x24},
            new byte[]{(byte)0x94, (byte)0x23, (byte)0x96, (byte)0x97},
            new byte[]{(byte)0x23, (byte)0x96, (byte)0x97, (byte)0x24},
            new byte[]{(byte)0x26, (byte)0x9C, (byte)0x98, (byte)0x9A},
            new byte[]{(byte)0x9C, (byte)0x98, (byte)0x99, (byte)0x28},
            new byte[]{(byte)0x9C, (byte)0x98, (byte)0x9A, (byte)0x99},
            new byte[]{(byte)0x98, (byte)0x9A, (byte)0x9B, (byte)0x08},
            new byte[]{(byte)0xA1, (byte)0x26, (byte)0x9C, (byte)0x25},
            new byte[]{(byte)0xA1, (byte)0x26, (byte)0x9D, (byte)0x25},
            new byte[]{(byte)0x9D, (byte)0x27, (byte)0x9E, (byte)0x29},
            new byte[]{(byte)0x27, (byte)0x9E, (byte)0x9F, (byte)0xA3},
            new byte[]{(byte)0x9D, (byte)0x27, (byte)0xA0, (byte)0x28},
            new byte[]{(byte)0x43, (byte)0x42, (byte)0xA1, (byte)0x26},
            new byte[]{(byte)0xA1, (byte)0x26, (byte)0xA2, (byte)0xA5},
            new byte[]{(byte)0x27, (byte)0x9E, (byte)0xA3, (byte)0x0A},
            new byte[]{(byte)0xA5, (byte)0x2A, (byte)0xA4, (byte)0x9F},
            new byte[]{(byte)0x47, (byte)0xA8, (byte)0xA5, (byte)0x2A},
            new byte[]{(byte)0xA8, (byte)0x2C, (byte)0xA6, (byte)0x29},
            new byte[]{(byte)0xAB, (byte)0xA9, (byte)0xA7, (byte)0x2B},
            new byte[]{(byte)0x44, (byte)0x47, (byte)0xA8, (byte)0x2C},
            new byte[]{(byte)0xBD, (byte)0xAB, (byte)0xA9, (byte)0xA7},
            new byte[]{(byte)0x2D, (byte)0xAF, (byte)0xAA, (byte)0xA6},
            new byte[]{(byte)0x2E, (byte)0xBD, (byte)0xAB, (byte)0xAF},
            new byte[]{(byte)0xB8, (byte)0xB0, (byte)0xAC, (byte)0xB2},
            new byte[]{(byte)0x43, (byte)0x01, (byte)0xAD, (byte)0x2E},
            new byte[]{(byte)0x43, (byte)0x01, (byte)0xAE, (byte)0x2E},
            new byte[]{(byte)0x2E, (byte)0x2D, (byte)0xAF, (byte)0xAA},
            new byte[]{(byte)0x32, (byte)0xB8, (byte)0xB0, (byte)0xB7},
            new byte[]{(byte)0x32, (byte)0xB8, (byte)0xB1, (byte)0xAC},
            new byte[]{(byte)0x2F, (byte)0xB7, (byte)0xB2, (byte)0xC4},
            new byte[]{(byte)0xBF, (byte)0x4F, (byte)0xB3, (byte)0x50},
            new byte[]{(byte)0xBD, (byte)0xBF, (byte)0xB4, (byte)0x4F},
            new byte[]{(byte)0xBE, (byte)0xB6, (byte)0xB5, (byte)0xBB},
            new byte[]{(byte)0x31, (byte)0xBE, (byte)0xB6, (byte)0xBC},
            new byte[]{(byte)0xB9, (byte)0x2F, (byte)0xB7, (byte)0xB2},
            new byte[]{(byte)0x01, (byte)0x32, (byte)0xB8, (byte)0xC0},
            new byte[]{(byte)0x32, (byte)0x31, (byte)0xB9, (byte)0xB6},
            new byte[]{(byte)0x31, (byte)0x30, (byte)0xBA, (byte)0xB5},
            new byte[]{(byte)0xC9, (byte)0xC3, (byte)0xBB, (byte)0xC5},
            new byte[]{(byte)0x31, (byte)0xBE, (byte)0xBC, (byte)0xBA},
            new byte[]{(byte)0xAD, (byte)0x2E, (byte)0xBD, (byte)0xAF},
            new byte[]{(byte)0x32, (byte)0x31, (byte)0xBE, (byte)0xBC},
            new byte[]{(byte)0x2E, (byte)0xBD, (byte)0xBF, (byte)0x36},
            new byte[]{(byte)0x32, (byte)0xB8, (byte)0xC0, (byte)0x2F},
            new byte[]{(byte)0xB8, (byte)0xB1, (byte)0xC1, (byte)0x34},
            new byte[]{(byte)0xB9, (byte)0x2F, (byte)0xC2, (byte)0xCD},
            new byte[]{(byte)0x31, (byte)0xC9, (byte)0xC3, (byte)0x35},
            new byte[]{(byte)0xD5, (byte)0xCD, (byte)0xC4, (byte)0xCE},
            new byte[]{(byte)0xCA, (byte)0x35, (byte)0xC5, (byte)0xCB},
            new byte[]{(byte)0x31, (byte)0x30, (byte)0xC6, (byte)0xD1},
            new byte[]{(byte)0x31, (byte)0x30, (byte)0xC7, (byte)0xC6},
            new byte[]{(byte)0x01, (byte)0x32, (byte)0xC8, (byte)0xC0},
            new byte[]{(byte)0x32, (byte)0x31, (byte)0xC9, (byte)0xC3},
            new byte[]{(byte)0x31, (byte)0xCF, (byte)0xCA, (byte)0x35},
            new byte[]{(byte)0x2F, (byte)0xC2, (byte)0xCB, (byte)0xCE},
            new byte[]{(byte)0x01, (byte)0xDF, (byte)0xCC, (byte)0xBD},
            new byte[]{(byte)0xE0, (byte)0xD5, (byte)0xCD, (byte)0xC4},
            new byte[]{(byte)0xD5, (byte)0xCD, (byte)0xCE, (byte)0x36},
            new byte[]{(byte)0x32, (byte)0x31, (byte)0xCF, (byte)0xCA},
            new byte[]{(byte)0xCF, (byte)0x37, (byte)0xD0, (byte)0xD8},
            new byte[]{(byte)0xCF, (byte)0xCA, (byte)0xD1, (byte)0xD6},
            new byte[]{(byte)0x01, (byte)0xDF, (byte)0xD2, (byte)0x38},
            new byte[]{(byte)0x38, (byte)0xD7, (byte)0xD3, (byte)0x39},
            new byte[]{(byte)0xEB, (byte)0xE4, (byte)0xD4, (byte)0x09},
            new byte[]{(byte)0x38, (byte)0xE0, (byte)0xD5, (byte)0xCD},
            new byte[]{(byte)0xCA, (byte)0xD1, (byte)0xD6, (byte)0xD8},
            new byte[]{(byte)0xD2, (byte)0x38, (byte)0xD7, (byte)0xD9},
            new byte[]{(byte)0xD7, (byte)0xD3, (byte)0xD8, (byte)0xDC},
            new byte[]{(byte)0x31, (byte)0xCF, (byte)0xD9, (byte)0xDE},
            new byte[]{(byte)0xCA, (byte)0xD1, (byte)0xDA, (byte)0xDC},
            new byte[]{(byte)0xDF, (byte)0xE7, (byte)0xDB, (byte)0xE6},
            new byte[]{(byte)0xD3, (byte)0xD8, (byte)0xDC, (byte)0xD4},
            new byte[]{(byte)0x38, (byte)0xD7, (byte)0xDD, (byte)0x3A},
            new byte[]{(byte)0xCF, (byte)0xD9, (byte)0xDE, (byte)0xE1},
            new byte[]{(byte)0x43, (byte)0x01, (byte)0xDF, (byte)0xEA},
            new byte[]{(byte)0xD2, (byte)0x38, (byte)0xE0, (byte)0xE5},
            new byte[]{(byte)0xD9, (byte)0xDE, (byte)0xE1, (byte)0xDC},
            new byte[]{(byte)0xE7, (byte)0xE8, (byte)0xE2, (byte)0xE1},
            new byte[]{(byte)0x38, (byte)0xE0, (byte)0xE3, (byte)0xE9},
            new byte[]{(byte)0xE5, (byte)0xEB, (byte)0xE4, (byte)0xD4},
            new byte[]{(byte)0x38, (byte)0xE0, (byte)0xE5, (byte)0xE9},
            new byte[]{(byte)0xE7, (byte)0xDB, (byte)0xE6, (byte)0xF2},
            new byte[]{(byte)0x01, (byte)0xDF, (byte)0xE7, (byte)0xEC},
            new byte[]{(byte)0xDF, (byte)0xE7, (byte)0xE8, (byte)0x3C},
            new byte[]{(byte)0xE0, (byte)0xE3, (byte)0xE9, (byte)0xED},
            new byte[]{(byte)0x01, (byte)0xDF, (byte)0xEA, (byte)0x3E},
            new byte[]{(byte)0xE0, (byte)0xE5, (byte)0xEB, (byte)0xEF},
            new byte[]{(byte)0xDF, (byte)0xE7, (byte)0xEC, (byte)0xF5},
            new byte[]{(byte)0xFA, (byte)0x3D, (byte)0xED, (byte)0xEF},
            new byte[]{(byte)0xFA, (byte)0x3D, (byte)0xEE, (byte)0xED},
            new byte[]{(byte)0xE5, (byte)0xEB, (byte)0xEF, (byte)0xD4},
            new byte[]{(byte)0xF3, (byte)0xF1, (byte)0xF0, (byte)0xF6},
            new byte[]{(byte)0x43, (byte)0xF3, (byte)0xF1, (byte)0xF9},
            new byte[]{(byte)0xEC, (byte)0xF5, (byte)0xF2, (byte)0x53},
            new byte[]{(byte)0x01, (byte)0x43, (byte)0xF3, (byte)0xF1},
            new byte[]{(byte)0x54, (byte)0xFA, (byte)0xF4, (byte)0xFC},
            new byte[]{(byte)0xE7, (byte)0xEC, (byte)0xF5, (byte)0x3F},
            new byte[]{(byte)0xF1, (byte)0xF0, (byte)0xF6, (byte)0xFB},
            new byte[]{(byte)0x54, (byte)0x55, (byte)0xF7, (byte)0x5A},
            new byte[]{(byte)0x54, (byte)0xFA, (byte)0xF8, (byte)0xFC},
            new byte[]{(byte)0xF3, (byte)0xF1, (byte)0xF9, (byte)0x3F},
            new byte[]{(byte)0xFD, (byte)0x54, (byte)0xFA, (byte)0xFF},
            new byte[]{(byte)0xF0, (byte)0xF6, (byte)0xFB, (byte)0x58},
            new byte[]{(byte)0xFA, (byte)0xFF, (byte)0xFC, (byte)0xFB},
            new byte[]{(byte)0x01, (byte)0x43, (byte)0xFD, (byte)0x0C},
            new byte[]{(byte)0xFD, (byte)0x54, (byte)0xFE, (byte)0x0B},
            new byte[]{(byte)0x54, (byte)0xFA, (byte)0xFF, (byte)0x56},
    };

    public static final int[] FULL_GRAY = new int[256];
    static {
        for (int i = 1; i < 256; i++) {
            FULL_GRAY[i] = i * 0x01010100 | 0xFF;
        }
    }

    /**
     * A nice palette that can be progressively reduced and still retain color quality.
     * Using {@link com.github.tommyettinger.anim8.PaletteReducer#exact(int[], int)} with limit values from
     * 3 to 256 will make usable palettes; a limit of 3 has only transparent, black, and white.
     * <br>
     * Uses YCwCm with rejection sampling of a Gaussian-distributed Halton sequence. Luma is treated
     * differently; because most of the gamut at mid-lightness would be accepted, possibly too many colors
     * wind up in that area if Gaussian makes the mid-range even more likely. This uses a bias/gain function
     * by Jon Barron, barronSpline(), to slightly reduce the odds of mid-range values being sampled. This
     * seems to allow more of the colors that challenge other palettes to work here, like dark brown.
     * <br>
     * This has been mostly superseded by {@link #HALTONIC255}, which has a similar capability to use a limited range of
     * the same palette, but isn't as biased toward desaturated colors.
     * <br>
     * Name is short for BArron gauSS halTON.
     */
    public static final int[] BASSTON255 = new int[]{
            0x00000000, 0x0B080FFF, 0xFAF7F0FF, 0x797577FF, 0x555555FF, 0xAAAAAAFF, 0x353336FF, 0xE0E0E0FF,
            0xC8C8C8FF, 0x5D8ABCFF, 0x741317FF, 0x77F6F2FF, 0xC08FADFF, 0x85299DFF, 0x4AC5A1FF, 0x315266FF,
            0x013C56FF, 0x9DC9B5FF, 0x5D8240FF, 0xA08167FF, 0x026957FF, 0xBADBD9FF, 0x95B7CDFF, 0x705A58FF,
            0x012016FF, 0xE85BBDFF, 0x7B3058FF, 0xDEBB6DFF, 0x339C9EFF, 0x50B365FF, 0x0F1A5CFF, 0x94B3C3FF,
            0x7D542AFF, 0xDCF1E1FF, 0xB37EA6FF, 0x206F4BFF, 0xDCE3ABFF, 0x4A2109FF, 0xC1AED6FF, 0x6A6D8DFF,
            0x84A25CFF, 0xDCC4E4FF, 0xB7B496FF, 0x18AB47FF, 0x7BABE3FF, 0x0E9236FF, 0xEEED85FF, 0x2E334BFF,
            0xB6555BFF, 0xA7667EFF, 0x2E3866FF, 0xB6DCAEFF, 0x98B3A7FF, 0x9C2383FF, 0x57BDAFFF, 0x8B2812FF,
            0xCAD9F9FF, 0x5A0A22FF, 0x568559FF, 0xB95CBEFF, 0x185280FF, 0xD6CDCBFF, 0x98B5DBFF, 0x8C4084FF,
            0xE2F3EDFF, 0x93B36BFF, 0x6E3775FF, 0xF0C9FFFF, 0x164E16FF, 0x8AF19FFF, 0x4F9C62FF, 0x51BC50FF,
            0x394826FF, 0x7FFCF6FF, 0x0E1581FF, 0xF37C90FF, 0x4D5AB2FF, 0xDDFCC2FF, 0xA77FD7FF, 0xA90666FF,
            0xEFC8ECFF, 0x8BEC8EFF, 0xB4407CFF, 0x84A173FF, 0x176656FF, 0xF5B7DDFF, 0x68EFADFF, 0x2AA341FF,
            0xA99AACFF, 0x1F901AFF, 0x2C4614FF, 0x617DD1FF, 0x3AABA5FF, 0x6E0F43FF, 0x1E0B55FF, 0x7AD377FF,
            0x606525FF, 0xB57A92FF, 0x117151FF, 0xA25337FF, 0x8D8498FF, 0x900543FF, 0xA5F8A8FF, 0x232416FF,
            0x9ECD65FF, 0x6257A1FF, 0x1E0C16FF, 0x7CB993FF, 0x08875BFF, 0x3D1D5DFF, 0x6E8066FF, 0xA17478FF,
            0x0D5765FF, 0x96EBE9FF, 0x90AAF8FF, 0x6C43A9FF, 0xECEDC7FF, 0xBA8B69FF, 0x793141FF, 0xCDB890FF,
            0x1AB767FF, 0xF0F9FFFF, 0x899298FF, 0x3E551DFF, 0xB3F69EFF, 0xCB95E3FF, 0x90457BFF, 0xCC819FFF,
            0x595064FF, 0x6B1808FF, 0x91E7C9FF, 0x7273B7FF, 0x3BC068FF, 0xC7C8D6FF, 0x86D16DFF, 0x17954FFF,
            0xC16AC6FF, 0x4D4A4CFF, 0xD3EAA0FF, 0xFB88BAFF, 0xA64A5EFF, 0xB38143FF, 0x2E4D5BFF, 0xF4B9C3FF,
            0x55EDCDFF, 0x746B29FF, 0x5DD298FF, 0x357C10FF, 0x2A3547FF, 0xE3A4CEFF, 0x67857FFF, 0x848B8BFF,
            0x2F4654FF, 0xF7B4B4FF, 0xA1BC90FF, 0x8D3E6AFF, 0x6DCA62FF, 0x1C812BFF, 0x3B272BFF, 0x9ED3C1FF,
            0x857444FF, 0xF64593FF, 0x276824FF, 0x242B29FF, 0xCAA3BDFF, 0x745E84FF, 0x86B9A5FF, 0x972C4EFF,
            0x4E1F51FF, 0x93F0B0FF, 0x6F925AFF, 0xDB3B83FF, 0xB690C6FF, 0x1B7C92FF, 0xB37A9AFF, 0x8E1D2DFF,
            0xA2FBDDFF, 0xB2BDA5FF, 0x517989FF, 0x4BB49AFF, 0x0F6646FF, 0xFBABD3FF, 0x340B49FF, 0x6F604EFF,
            0xE85BBBFF, 0x673876FF, 0x194A14FF, 0x9B5686FF, 0x1CD583FF, 0x621F45FF, 0xC8C8D8FF, 0xCD9880FF,
            0x307D73FF, 0x7FAA9EFF, 0x355C58FF, 0xD7E7A7FF, 0x232A5AFF, 0xABC0D2FF, 0xCB268EFF, 0xE54D8DFF,
            0x4F2E86FF, 0xE3BEF2FF, 0x7FE28EFF, 0x993A90FF, 0xA5A975FF, 0x535E42FF, 0x084D5FFF, 0xE2B987FF,
            0x3CAD71FF, 0x7E8389FF, 0x543313FF, 0xD6C3B5FF, 0xA593FDFF, 0xA2303AFF, 0x70C34DFF, 0x543D6BFF,
            0x63012BFF, 0x4B867EFF, 0x7D978DFF, 0x465105FF, 0xD695ABFF, 0x2E9256FF, 0x2D0808FF, 0x9D98BCFF,
            0x6F3E52FF, 0x194929FF, 0xD5B8A2FF, 0xCB3A76FF, 0x6EA169FF, 0xC0CCF0FF, 0xADA5C5FF, 0x954438FF,
            0xE2F8C2FF, 0x090561FF, 0x9495C1FF, 0x4A5642FF, 0xC4EBE1FF, 0x095509FF, 0xEA9FA7FF, 0x5B7C9AFF,
            0x3CDA6CFF, 0x2A4C8AFF, 0xB7BC8AFF, 0x6D7C18FF, 0xEB777BFF, 0x3C6D59FF, 0x770052FF, 0xD0B8D0FF,
            0x8C66ACFF, 0x937286FF, 0x641F29FF, 0xB1D0E4FF, 0xBCA36FFF, 0x6D4482FF, 0xF9D4ECFF, 0x65BB85FF,
    };

    /**
     * Randomly chosen colors, selected only if they met a minimum difference from existing ones. The difference was
     * measured in the IPT color space (IPT_HQ in colorful-gdx), measuring lightness/intensity differences as twice as
     * significant as chroma differences, and the randomly selected protan and tritan components were pushed toward the
     * center of the range with a Barron spline.
     * <br>
     * This is a surprisingly good palette, probably because it enforces difference between all colors. It allows more
     * saturated colors than {@link #BASSTON255}, but is otherwise fairly similar, and can be restricted progressively
     * in a similar way. Its progressive restriction isn't as good as {@link #BASSTON255} or {@link #HALTONIC255}.
     */
    public static final int[] RANDO255 = new int[]{
            0x00000000, 0x0B080FFF, 0xFAF7F0FF, 0x797577FF, 0x555555FF, 0xAAAAAAFF, 0x353336FF, 0xE0E0E0FF,
            0xC8C8C8FF, 0xB5C289FF, 0xB64823FF, 0x876DBDFF, 0xE1CA3CFF, 0x8B4252FF, 0x43B684FF, 0x3C43D6FF,
            0x5E2F92FF, 0x5B5E74FF, 0xA7604DFF, 0xE65F84FF, 0x9E43B3FF, 0x7C2A45FF, 0xEAA768FF, 0x8B267AFF,
            0x917CEEFF, 0xEA99B2FF, 0x8E898CFF, 0x2F249EFF, 0x1E5736FF, 0x385FA5FF, 0xAEA451FF, 0x2A3EB1FF,
            0xE77CCFFF, 0xC148B6FF, 0xD960BAFF, 0x75ECDFFF, 0x5FC2C7FF, 0xAE4D7FFF, 0x2B221CFF, 0x5B92C8FF,
            0x1A415BFF, 0x874028FF, 0x99BC58FF, 0xF1F074FF, 0xDD4067FF, 0x3E6FD2FF, 0x6A9849FF, 0xE8F4B0FF,
            0xAD8250FF, 0xB240EEFF, 0x211317FF, 0xAFE38DFF, 0x9AA08FFF, 0xF14FDFFF, 0xB090E5FF, 0x7240CAFF,
            0xC3A4E8FF, 0x86FAFCFF, 0x281C4FFF, 0x71371DFF, 0xEA3123FF, 0xB03859FF, 0xBEB9B7FF, 0x764D9DFF,
            0x826C22FF, 0xEDB396FF, 0xE6D55FFF, 0xED7BA2FF, 0x316D41FF, 0xBF253AFF, 0xCF8287FF, 0xDA6F4AFF,
            0x50316FFF, 0xE9832BFF, 0x86DE67FF, 0x5EF4AEFF, 0x7DD2C5FF, 0x642030FF, 0xAA78AFFF, 0x4A172EFF,
            0xBBE8B6FF, 0x0B1D8BFF, 0x4ED540FF, 0x992E9DFF, 0x4DADB8FF, 0x66B441FF, 0x704BE4FF, 0x9D221EFF,
            0x42912FFF, 0xC05E89FF, 0x695F23FF, 0xE3F63EFF, 0x4DD277FF, 0x184A25FF, 0x7E60EEFF, 0x3B7A58FF,
            0x1A29E5FF, 0xBD64E1FF, 0xD65B24FF, 0xEE3087FF, 0xD739D9FF, 0xD9BAF5FF, 0xE69C3BFF, 0x96832AFF,
            0x47F543FF, 0x5DA6EDFF, 0x378A64FF, 0x5C8296FF, 0x3FA867FF, 0x48225DFF, 0xA89A2FFF, 0x7463A4FF,
            0x75BEEDFF, 0x583CB9FF, 0xED40ABFF, 0x9EF55AFF, 0x23577EFF, 0x4A2E15FF, 0x533A41FF, 0x141236FF,
            0x417DF1FF, 0xDA2C51FF, 0xA094BEFF, 0x4EA094FF, 0xEED48EFF, 0x4FEB90FF, 0x914E71FF, 0x96CEF0FF,
            0xDD86F2FF, 0xE4B539FF, 0x9E3BDAFF, 0xCF9A85FF, 0xF0A4CDFF, 0x2658E8FF, 0x821C16FF, 0x010001FF,
            0xA1214FFF, 0x1D2868FF, 0x1B437BFF, 0x171FBFFF, 0xF1CEC7FF, 0xBF2879FF, 0x7A29A2FF, 0x6CBC96FF,
            0xEB7D5CFF, 0x447F2DFF, 0x47D89AFF, 0xA5CD45FF, 0x6C3C5BFF, 0x4394F2FF, 0x725F48FF, 0x11351CFF,
            0xA9696AFF, 0x080929FF, 0x6C4576FF, 0x3F7583FF, 0x7C744EFF, 0x5E4F24FF, 0x8E9864FF, 0xBB6E43FF,
            0x4484C6FF, 0xC93B94FF, 0x936D96FF, 0xC07777FF, 0xC8FADEFF, 0x4361C3FF, 0xB8E13AFF, 0xAC351FFF,
            0xD568F1FF, 0x001451FF, 0xC87CC2FF, 0x3C1F7EFF, 0xEC5143FF, 0x4A1210FF, 0xF4E2A0FF, 0x642BF0FF,
            0xEB5269FF, 0xC08C5CFF, 0x31AE2DFF, 0xB36023FF, 0xE7BE6DFF, 0x0A156BFF, 0xB3B37CFF, 0x90512AFF,
            0x611613FF, 0xF5C3F6FF, 0x95AAD9FF, 0x78896FFF, 0xF7E3F9FF, 0xBBD4F8FF, 0xEC9166FF, 0xC8CC97FF,
            0xAAF78DFF, 0x8B79D1FF, 0x1F6B21FF, 0x661E5DFF, 0xB35DCAFF, 0xC04A43FF, 0x38C559FF, 0x71217CFF,
            0x27515BFF, 0x4E3B20FF, 0xCC93AFFF, 0x6CE337FF, 0x875D87FF, 0xEFA1F4FF, 0xF0BDB0FF, 0xB8B433FF,
            0x564B94FF, 0x8491A8FF, 0x9B5246FF, 0xC78327FF, 0xF33ECBFF, 0x9FF8CCFF, 0x2E123DFF, 0x9F307DFF,
            0xC4689EFF, 0x7AAA6DFF, 0xD3AA95FF, 0xF7FCC8FF, 0x3A9783FF, 0xD3EA6BFF, 0x4E1748FF, 0xF0669AFF,
            0x97DDC9FF, 0x210807FF, 0xCB5E60FF, 0xF46AF2FF, 0xC6AA5DFF, 0xE3E635FF, 0x3077A7FF, 0x4724D5FF,
            0xE76724FF, 0x7E96DEFF, 0xD62A1EFF, 0x812DBAFF, 0xC59DCDFF, 0xAEBAECFF, 0x4A4574FF, 0x0D240CFF,
            0x4823ABFF, 0x868054FF, 0x852462FF, 0x618BA6FF, 0x7CC234FF, 0xB12DA5FF, 0xED9396FF, 0xB28BA4FF,
            0x787E27FF, 0xD743F1FF, 0xDB2FAAFF, 0xCC9A2EFF, 0xF0B5D6FF, 0x89C5A8FF, 0x8258C5FF, 0x696B70FF,
    };

    /**
     * This 255-color (plus transparent) palette uses the (3,5,7) Halton sequence to get 3D points, treats those as IPT
     * channel values, and rejects out-of-gamut colors. This also rejects any color that is too similar to an existing
     * color, which in this case made this try 130958 colors before finally getting 256 that work. Using the Halton
     * sequence provides one of the stronger guarantees that removing any sequential items (after the first 9, which are
     * preset grayscale colors) will produce a similarly-distributed palette. Typically, 64 items from this are enough
     * to make pixel art look good enough with dithering, and it continues to improve with more colors. It has exactly 8
     * colors that are purely grayscale, all right at the start after transparent.
     */
    public static final int[] HALTONIC255 = new int[]{
            0x00000000, 0x010101FF, 0xFEFEFEFF, 0x7B7B7BFF, 0x555555FF, 0xAAAAAAFF, 0x333333FF, 0xE0E0E0FF,
            0xC8C8C8FF, 0xBEBB4EFF, 0x1FAE9AFF, 0xC2BBA9FF, 0xB46B58FF, 0x7C82C2FF, 0xF2825BFF, 0xD55193FF,
            0x8C525CFF, 0x6AEF59FF, 0x1F439BFF, 0x793210FF, 0x3B3962FF, 0x16D72EFF, 0xB53FC6FF, 0xB380C7FF,
            0xEDE389FF, 0x8420C6FF, 0x291710FF, 0x69D4D3FF, 0x76121CFF, 0x1FA92AFF, 0x64852CFF, 0x7A42DBFF,
            0xEA5A5EFF, 0x7E3E8CFF, 0xB8FA35FF, 0x4F15DAFF, 0xBC3E61FF, 0xA19150FF, 0x9BBD25FF, 0xF095C2FF,
            0xFFC24FFF, 0x7B7CFCFF, 0x9BE8C3FF, 0xE25EC4FF, 0x3D79ADFF, 0xC0422AFF, 0x260E5DFF, 0xF645A3FF,
            0xF8ACE4FF, 0xB0871FFF, 0x42582CFF, 0x549787FF, 0xE31BA2FF, 0x1E222AFF, 0xB39CF5FF, 0x8C135FFF,
            0x71CB92FF, 0xB767B3FF, 0x7E5030FF, 0x406697FF, 0x502B06FF, 0xDFAC73FF, 0xC21A26FF, 0xECFE65FF,
            0x7E64E4FF, 0xBFD22EFF, 0xDA938FFF, 0x8E94E8FF, 0xA0DE92FF, 0x8C6BA9FF, 0x1662FCFF, 0xCA4EECFF,
            0x8899AAFF, 0x24BC57FF, 0x680AA7FF, 0xFE6885FF, 0x2E1E6EFF, 0x875695FF, 0x981C20FF, 0x47723EFF,
            0xF4E54FFF, 0x71174CFF, 0xC5F8ABFF, 0x75BFC7FF, 0xF23C37FF, 0xFC73E9FF, 0x893A5FFF, 0x4F50C5FF,
            0xE06635FF, 0xB00D9FFF, 0xE90FCAFF, 0x1E9CFBFF, 0x3538F9FF, 0xE3971BFF, 0x500153FF, 0x2DB2CEFF,
            0xB46D86FF, 0xFE43F2FF, 0x4FF990FF, 0x434531FF, 0xE31515FF, 0xDFA24BFF, 0x4282E6FF, 0x56626FFF,
            0xF8B891FF, 0x4B0932FF, 0xD769E6FF, 0x906D1DFF, 0xD51144FF, 0x76B6F8FF, 0x4DF7ECFF, 0x169355FF,
            0xB7C87DFF, 0x650C83FF, 0x0AE930FF, 0xEDB71AFF, 0x78AE77FF, 0x081236FF, 0x25E5F4FF, 0x5A4382FF,
            0xB1FEFAFF, 0xEA7B0BFF, 0xF372C1FF, 0xA31479FF, 0x3EDB6AFF, 0xA44210FF, 0xB2C1FAFF, 0xAE9784FF,
            0xE83175FF, 0xF925DFFF, 0xAB134FFF, 0xC03E83FF, 0x117F76FF, 0xE6E21DFF, 0x6B3858FF, 0x88ED12FF,
            0x3E3486FF, 0x3DBB14FF, 0xD35521FF, 0xC2836DFF, 0x244E65FF, 0xAC29F6FF, 0xE71A58FF, 0x1127ABFF,
            0xD086E0FF, 0x496B1CFF, 0xD27E96FF, 0x87353AFF, 0xD308EDFF, 0x5D3BAAFF, 0x11560BFF, 0x469AC6FF,
            0xEDD4B9FF, 0xA4A222FF, 0x48A75CFF, 0xBB7213FF, 0xFBBAFAFF, 0x794811FF, 0x83804EFF, 0xB1FB85FF,
            0x61C56DFF, 0x9D36B1FF, 0x201693FF, 0x184BB9FF, 0x5B0606FF, 0xAB5692FF, 0x090B23FF, 0xA7593AFF,
            0x14D7ADFF, 0xAC6BF1FF, 0xCC0E7EFF, 0x1B90B4FF, 0xA5A94CFF, 0x264509FF, 0xE994FDFF, 0xC1E367FF,
            0x1D16D5FF, 0x1C5C7DFF, 0xCF794CFF, 0xF6FF95FF, 0x7B1A88FF, 0x68B69CFF, 0xAADAF7FF, 0x6625E1FF,
            0x223308FF, 0x7147FEFF, 0xDF6A7FFF, 0xF5FE22FF, 0xB6B1D2FF, 0x35E986FF, 0x2C69D4FF, 0x6D63C8FF,
            0x32042DFF, 0xF4A293FF, 0x22040DFF, 0xF2FAC2FF, 0xFFBBB2FF, 0x9D3F7CFF, 0x86694EFF, 0xD34B57FF,
            0x5B2E24FF, 0xF2CF80FF, 0x10EBAFFF, 0x7B603CFF, 0xFDE5A7FF, 0xB41808FF, 0xA83F4BFF, 0xC221B4FF,
            0x9604A4FF, 0x878287FF, 0x3F1C16FF, 0x5AA7FEFF, 0x55096CFF, 0x1E9922FF, 0x031050FF, 0xA284A1FF,
            0x2424EDFF, 0x8FD111FF, 0x480C8BFF, 0x71FE60FF, 0xFE1D02FF, 0xFF9A60FF, 0xD44ABEFF, 0xFE7B9AFF,
            0x68915EFF, 0x9EFFD1FF, 0xABAC7CFF, 0x4413BFFF, 0xF93E83FF, 0x7A9633FF, 0xA05B73FF, 0x83A3C3FF,
            0x124D4AFF, 0x397E0EFF, 0x6AFEB5FF, 0x975813FF, 0xFEC704FF, 0xBC1462FF, 0xA008E0FF, 0x418886FF,
            0x58CAFEFF, 0x4E7A53FF, 0x7A07FFFF, 0x8D4EBCFF, 0xFE3257FF, 0xA46BD5FF, 0xB079FFFF, 0x909478FF,
            0xFC6C42FF, 0x5F3342FF, 0x6A6A9DFF, 0xFF6315FF, 0x9D56D2FF, 0x6782A7FF, 0x957F24FF, 0xD08FB9FF,
    };

}
