package voxswirl.app;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;
import com.badlogic.gdx.graphics.GL30;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.PixmapIO;
import com.badlogic.gdx.utils.Array;
import com.github.tommyettinger.anim8.*;
import voxswirl.io.LittleEndianDataInputStream;
import voxswirl.io.VoxIO;
import voxswirl.physical.Tools3D;
import voxswirl.visual.SplatRenderer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class VoxSwirl extends ApplicationAdapter {
    public static final int SCREEN_WIDTH = 512;//640;
    public static final int SCREEN_HEIGHT = 512;//720;
    private SplatRenderer renderer;
    private byte[][][] voxels;
    private String name;
    private String[] inputs;
    private PixmapIO.PNG png;
    private AnimatedGif gif;
    private PNG8 png8;
    private AnimatedPNG apng;
    public VoxSwirl(String[] args){
        if(args != null && args.length > 0)
            inputs = args;
        else 
        {
            System.out.println("INVALID ARGUMENTS. Please supply space-separated absolute paths to .vox models, or use the .bat file.");
            inputs = new String[]{"vox/Lomuk.vox", "vox/Tree.vox", "vox/Eye_Tyrant.vox", "vox/Infantry_Firing.vox"};
//            inputs = new String[]{"vox/Lomuk.vox", "vox/Tree.vox", "vox/Eye_Tyrant.vox", "vox/IPT.vox", "vox/LAB.vox"};
//            inputs = new String[]{"vox/Infantry_Firing.vox"};
//            inputs = new String[]{"vox/IPT_No_Pow.vox"};
//            inputs = new String[]{"vox/IPT_Original.vox"};
//            inputs = new String[]{"vox/IPT.vox"};
//            inputs = new String[]{"vox/LAB.vox"};
//            inputs = new String[]{"vox/libGDX_BadLogic_Logo.vox"};
//            inputs = new String[]{"vox/libGDX_Gray.vox"};
            if(!new File(inputs[0]).exists()) 
                System.exit(0);
        }
    }
    @Override
    public void create() {
        if(inputs == null) Gdx.app.exit();
        png = new PixmapIO.PNG();
        png8 = new PNG8();
        gif = new AnimatedGif();
        apng = new AnimatedPNG();
        gif.setDitherAlgorithm(Dithered.DitherAlgorithm.SCATTER);
        png8.setDitherAlgorithm(Dithered.DitherAlgorithm.SCATTER);
        final int[] bw = new int[]{0x00000000, 0x000000FF, 0xFFFFFFFF,};
        final int[] grayscale = new int[]{0x00000000, 0x000000FF, 0x666666FF, 0xBBBBBBFF, 0xFFFFFFFF,};
        final int[] gb4 = new int[]{0x00000000, 0x081820FF, 0x346856FF, 0x88C070FF, 0xE0F8D0FF,};
        final int[] gb16 = new int[]{0x00000000,
                0x000000FF, 0x081820FF, 0x132C2DFF, 0x1E403BFF, 0x295447FF, 0x346856FF, 0x497E5BFF, 0x5E9463FF,
                0x73AA69FF, 0x88C070FF, 0x9ECE88FF, 0xB4DCA0FF, 0xCAEAB8FF, 0xE0F8D0FF, 0xEFFBE7FF, 0xFFFFFFFF, };
        final int[] az32 = new int[]{0x00000000,
                0x372B26FF, 0xC37C6BFF, 0xDD997EFF, 0x6E6550FF, 0x9A765EFF, 0xE1AD56FF, 0xC6B5A5FF, 0xE9B58CFF,
                0xEFCBB3FF, 0xF7DFAAFF, 0xFFEDD4FF, 0xBBD18AFF, 0x355525FF, 0x557A41FF, 0x112D19FF, 0x45644FFF,
                0x62966AFF, 0x86BB9AFF, 0x15452DFF, 0x396A76FF, 0x86A2B7FF, 0x92B3DBFF, 0x3D4186FF, 0x6672BFFF,
                0x15111BFF, 0x9A76BFFF, 0x925EA2FF, 0xC7A2CFFF, 0x553549FF, 0xA24D72FF, 0xC38E92FF, 0xE3A6BBFF, };
//more saturated
//        final int[] gh63 = new int[]{0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF, 0xFAF7F0FF, 0x507FA5FF, 0x3118ABFF, 0xB2EF53FF, 0x1D3CE9FF, 0x15E420FF, 0xA4C387FF, 0xC9595CFF, 0x986F2BFF, 0xEF157FFF, 0xFFB485FF, 0x3D6BC3FF, 0xE34A38FF, 0x031220FF, 0xF762BBFF, 0xB87E86FF, 0x1726CFFF, 0x75DFE0FF, 0x061383FF, 0x2F9E1DFF, 0x7D93C9FF, 0x366F47FF, 0xD7C99DFF, 0x3BD76FFF, 0xDD0EC9FF, 0x3BB974FF, 0x601451FF, 0x104D6DFF, 0x7E43B4FF, 0xC1F9E3FF, 0x2E5E6EFF, 0xC01C13FF, 0xD8E632FF, 0x94A002FF, 0xC23011FF, 0x9BFC60FF, 0xA393D3FF, 0x62000DFF, 0x352CD4FF, 0xDBC7F4FF, 0xABE34DFF, 0xD04C91FF, 0x78025AFF, 0x4DE571FF, 0x7B7E36FF, 0x999E9FFF, 0xE15603FF, 0xB7F3C8FF, 0x3C859FFF, 0x57A34BFF, 0x602665FF, 0xE44142FF, 0x8AF2FAFF, 0xB67AA7FF, 0x396235FF, 0xACDECCFF, };
//less saturated
//        final int[] gh63 = new int[]{0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF, 0xFAF7F0FF, 0x0E7DE0FF, 0x5A09ADFF, 0xDBE156FF, 0x00D25EFF, 0x193DA6FF, 0xB0CC68FF, 0x301153FF, 0x99A1C2FF, 0x986F2BFF, 0xA38CA8FF, 0x353DB3FF, 0x47A75CFF, 0xB8320DFF, 0x9AA1B1FF, 0xABFECFFF, 0x9D75D5FF, 0x4E6035FF, 0x652331FF, 0x30D1D4FF, 0xCA8B59FF, 0xB70C8EFF, 0x310486FF, 0x427728FF, 0xFB4C88FF, 0x705AEFFF, 0xD7C99DFF, 0x870A06FF, 0xADB860FF, 0x5B4E93FF, 0xEED5F7FF, 0x57CC2EFF, 0xD13A21FF, 0x440198FF, 0x07A053FF, 0x3E8EB9FF, 0x60C2A7FF, 0x786071FF, 0xDFEFE5FF, 0x720207FF, 0xCC9C69FF, 0x055F8DFF, 0x7B340FFF, 0x93EA60FF, 0x6D8663FF, 0xB8972FFF, 0x625505FF, 0x6DF597FF, 0x0D233BFF, 0xB486E6FF, 0x026AA9FF, 0x3EB491FF, 0xA12C7BFF, 0x135207FF, 0xADD275FF, 0x6267A7FF, };
//mid saturation, central lightness
        final int[] gh63 = new int[]{0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF, 0xFAF7F0FF, 0x0B97A1FF, 0x86022EFF, 0xA99FA5FF, 0x2F48B2FF, 0xF94F48FF, 0xDDF468FF, 0xCBB4EBFF, 0x133D4DFF, 0x1E98D8FF, 0xA100A9FF, 0x26CD3EFF, 0xCB5C83FF, 0x61E0F8FF, 0xE9AE4CFF, 0x486A49FF, 0x4F1856FF, 0x3A76E3FF, 0x209461FF, 0x49126AFF, 0xA7A459FF, 0xA82626FF, 0x8EC0C3FF, 0xA9606DFF, 0xA74244FF, 0x1CB397FF, 0xE5ADBDFF, 0xC24295FF, 0x7EA5D2FF, 0x87EFD5FF, 0x0AA8B5FF, 0x796472FF, 0xD6D7AFFF, 0xE46794FF, 0xFCEDC1FF, 0x63CE99FF, 0x864A91FF, 0x58ECFFFF, 0x6A228AFF, 0xBA51DAFF, 0x245406FF, 0xD0C473FF, 0xAC46CDFF, 0x95AFCEFF, 0x336286FF, 0xD19282FF, 0x8AEEE4FF, 0x96C9B4FF, 0xC95A6AFF, 0xC06F82FF, 0x20306EFF, 0x7B8DBEFF, 0xCA7756FF, 0xADC48DFF, 0x5B723BFF, 0xE8917FFF, };
// disrupted sequence
        final int[] ghd63 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0x0897A4FF, 0x880130FF, 0xD7DBD4FF, 0xAF8FC7FF, 0x134DBCFF, 0xAD6E3CFF, 0x2D344EFF,
                0x70192EFF, 0x569AA6FF, 0x502E77FF, 0xE69996FF, 0x596929FF, 0x69A668FF, 0xAA6093FF, 0xA1C9FCFF,
                0xB0A68EFF, 0x476750FF, 0x501658FF, 0x3179E2FF, 0x20945FFF, 0x63086BFF, 0x88B24FFF, 0x264D97FF,
                0x76C8C2FF, 0x8A7C41FF, 0x091D5FFF, 0x1B2800FF, 0x915528FF, 0x5D92B6FF, 0x30405AFF, 0xFEBE7FFF,
                0x943BCCFF, 0x8EA5C5FF, 0x83EFDAFF, 0x6A86BAFF, 0xC7A592FF, 0xAA5274FF, 0xBED4CAFF, 0x877DA8FF,
                0xFCEDC1FF, 0x5B4C21FF, 0xABB2A4FF, 0x6047B8FF, 0x7FFFC6FF, 0x8BDEF9FF, 0x782C66FF, 0x6C6CD6FF,
                0x3E4614FF, 0xAE6287FF, 0x5FCDB0FF, 0x495B87FF, 0xBD948EFF, 0x8DF0DBFF, 0x78D3B2FF, 0x837D4DFF,
        };
        final int[] ghr32 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0xA01948FF, 0x18CA91FF, 0x076C12FF, 0xD1B8E1FF, 0xC768D7FF, 0x8F6730FF, 0x44BF74FF,
                0x76450FFF, 0x4569B5FF, 0x1A0635FF, 0xC5706FFF, 0x007A43FF, 0x98C5B6FF, 0x9B39B2FF, 0x9CF1EFFF,
                0x48262FFF, 0xFAB8C0FF, 0x0A2815FF, 0x275ECCFF, 0x6A1E7DFF, 0x778E35FF, 0xBD3819FF, 0x9BE1DEFF,
        };
        final int[] ghr63 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0xA01948FF, 0x18CA91FF, 0x076C12FF, 0xD1B8E1FF, 0xC768D7FF, 0x8F6730FF, 0x44BF74FF,
                0x76450FFF, 0x4569B5FF, 0x1A0635FF, 0xC5706FFF, 0x007A43FF, 0x98C5B6FF, 0x9B39B2FF, 0x9CF1EFFF,
                0x48262FFF, 0xFAB8C0FF, 0x0A2815FF, 0x275ECCFF, 0x6A1E7DFF, 0x778E35FF, 0xBD3819FF, 0x9BE1DEFF,
                0x8C0F0AFF, 0xACB1A0FF, 0xA394C4FF, 0x68070CFF, 0x507394FF, 0x1B5264FF, 0xCB8C55FF, 0x8534B8FF,
                0xB6C6E4FF, 0x261286FF, 0x37D5E2FF, 0x0A3744FF, 0xE758CBFF, 0xBF3C6BFF, 0xA1A75EFF, 0x945B87FF,
                0xB9AA7FFF, 0x8F3D3FFF, 0xC0D4C2FF, 0x1D0372FF, 0xF277C4FF, 0x41C18CFF, 0xA7EFFCFF, 0xC52EC5FF,
                0x525124FF, 0xE46884FF, 0x0F1475FF, 0x6072D6FF, 0xCDBDC1FF, 0x25226CFF, 0xCBDBD1FF, 0x7A0C28FF,
        };
        final int[] gh127 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0x0897A4FF, 0x880130FF, 0xD7DBD4FF, 0xAF8FC7FF, 0x134DBCFF, 0xAD6E3CFF, 0x2D344EFF,
                0x70192EFF, 0x569AA6FF, 0x502E77FF, 0xE69996FF, 0x596929FF, 0x69A668FF, 0xAA6093FF, 0xA1C9FCFF,
                0xB0A68EFF, 0x476750FF, 0x501658FF, 0x3179E2FF, 0x20945FFF, 0x63086BFF, 0x88B24FFF, 0x264D97FF,
                0x76C8C2FF, 0x8A7C41FF, 0x091D5FFF, 0x1B2800FF, 0x915528FF, 0x5D92B6FF, 0x30405AFF, 0xFEBE7FFF,
                0x943BCCFF, 0x8EA5C5FF, 0x83EFDAFF, 0x6A86BAFF, 0xC7A592FF, 0xAA5274FF, 0xBED4CAFF, 0x877DA8FF,
                0xFCEDC1FF, 0x5B4C21FF, 0xABB2A4FF, 0x6047B8FF, 0x7FFFC6FF, 0x8BDEF9FF, 0x782C66FF, 0x6C6CD6FF,
                0x3E4614FF, 0xAE6287FF, 0x5FCDB0FF, 0x495B87FF, 0xBD948EFF, 0x8DF0DBFF, 0x78D3B2FF, 0x837D4DFF,
                0xA0885FFF, 0x1D375FFF, 0x4FA1B1FF, 0xAB727CFF, 0xB6CE6EFF, 0x60762EFF, 0xC3B446FF, 0x79482DFF,
                0x7A8A68FF, 0x5B68C3FF, 0xBC8E5BFF, 0x654E10FF, 0x720635FF, 0x6F6F3FFF, 0x94B566FF, 0x3B407BFF,
                0x3F9597FF, 0x19613BFF, 0x608A63FF, 0xD59CDFFF, 0x3F0B64FF, 0x8E95A9FF, 0x614B53FF, 0x82E380FF,
                0xD1BAF5FF, 0x356AC4FF, 0x63F5DFFF, 0x68211AFF, 0x6E9866FF, 0x501546FF, 0xCEA196FF, 0xBD5534FF,
                0xC6D2E9FF, 0x3088A0FF, 0xF6C0EBFF, 0xC8F078FF, 0x661293FF, 0xB01125FF, 0x2B735CFF, 0x94AAC5FF,
                0xA12F97FF, 0x9BAB52FF, 0xE699B4FF, 0xAE497CFF, 0x9870C8FF, 0x6D748AFF, 0xD788E6FF, 0xA35631FF,
                0xAFEEBCFF, 0x834A74FF, 0xA684BEFF, 0xD43864FF, 0x2AD5FBFF, 0x1276C7FF, 0xBA7865FF, 0x65003EFF,
                0x458311FF, 0xF5886CFF, 0x4F502EFF, 0x94124EFF, 0x8ACECBFF, 0xB77242FF, 0xF1AC82FF, 0x2F084EFF,
        };
        final int[] gh255 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0x0B97A1FF, 0x86022EFF, 0xAA9EA7FF, 0x2D48B2FF, 0xFB4F48FF, 0xB3DACDFF, 0xCCB3EDFF,
                0x0F3F4DFF, 0x1798DFFF, 0xA000ABFF, 0x2CD131FF, 0xCD568FFF, 0x55E3FBFF, 0xFFA945FF, 0x48752DFF,
                0x780368FF, 0x1FA781FF, 0x1C985AFF, 0xCCBB59FF, 0x30547FFF, 0x78CCBCFF, 0x6B056CFF, 0x86B34DFF,
                0xB83100FF, 0x7FC5C2FF, 0xD85B55FF, 0x061B67FF, 0x9D5B0EFF, 0x479EA9FF, 0x183685FF, 0xD8DADAFF,
                0x243009FF, 0xF1B5A0FF, 0x5C6399FF, 0x8BAEB1FF, 0x350639FF, 0x99E7DBFF, 0x4195B8FF, 0x346706FF,
                0xE99B90FF, 0xAA5274FF, 0xB3D9C6FF, 0x213022FF, 0xB467BBFF, 0xFCEDC1FF, 0x61530BFF, 0x87C396FF,
                0x6145BBFF, 0x7FFFC6FF, 0x97DFECFF, 0x7B2E5EFF, 0xD647DCFF, 0xB44EB3FF, 0x5EB1F5FF, 0x87CEB3FF,
                0xD4624EFF, 0xE16483FF, 0x24433DFF, 0x3795E2FF, 0xD97256FF, 0xB5BAA2FF, 0x6B7D14FF, 0xBE9596FF,
                0xAC2F41FF, 0x48A944FF, 0x456A82FF, 0x6B807BFF, 0xA8818CFF, 0x8F4308FF, 0x210D65FF, 0x61685CFF,
                0x63B787FF, 0x723960FF, 0x0E86E4FF, 0x19613BFF, 0xF6BEB0FF, 0x15AE47FF, 0x390E62FF, 0x9096A4FF,
                0x8BD796FF, 0x1F819EFF, 0x68F9D2FF, 0xA4052EFF, 0x59A84DFF, 0x501546FF, 0x1A2F78FF, 0xC6484DFF,
                0x2688A9FF, 0xE7C5EAFF, 0xAFE0B4FF, 0xA0155AFF, 0xB01125FF, 0xE8A265FF, 0x726F2BFF, 0x7CA5E6FF,
                0xB126A0FF, 0x74B94FFF, 0xF1E48FFF, 0xE695C0FF, 0xBC437EFF, 0x8F849EFF, 0x2979B5FF, 0xD788E6FF,
                0x6C5F48FF, 0x98F7B9FF, 0x834386FF, 0xC776C5FF, 0x254B4FFF, 0x8C672BFF, 0xAEB4E0FF, 0x1477C3FF,
                0xA38063FF, 0x070678FF, 0x597C13FF, 0xE0A634FF, 0x535C0DFF, 0x981050FF, 0x82785EFF, 0xE0BB6AFF,
                0xC370BFFF, 0x2E4D62FF, 0xEC99B8FF, 0x1F1600FF, 0x78F198FF, 0x0679AFFF, 0x756DD7FF, 0x18A84AFF,
                0x7BB341FF, 0xD6EEF7FF, 0xA71F7AFF, 0xDCC562FF, 0x5F843CFF, 0xD3FFCAFF, 0x018112FF, 0xA56AC3FF,
                0x552E52FF, 0x59DCE4FF, 0x0F69AEFF, 0xBB7DE6FF, 0x520010FF, 0x94FEC8FF, 0x390B0FFF, 0xE7A8FAFF,
                0x6477A5FF, 0x809E58FF, 0x85391EFF, 0x71BF71FF, 0xFA9BCEFF, 0x309E08FF, 0x13C5BFFF, 0xB459D1FF,
                0x249D46FF, 0xFFDA6BFF, 0x6494C3FF, 0x6C3A6FFF, 0x4C4CD1FF, 0x8AAF92FF, 0xA54235FF, 0x86F760FF,
                0x013139FF, 0x369D7AFF, 0x6FAE9AFF, 0x9E376DFF, 0x131F2BFF, 0x9CEDBEFF, 0xD77C28FF, 0x65F4D4FF,
                0x163B55FF, 0x9163BFFF, 0xF0D4DCFF, 0x5E283BFF, 0x5AA0F0FF, 0x416270FF, 0x2CA04AFF, 0xDEBFF8FF,
                0xC7D4B1FF, 0x4D4717FF, 0x242E41FF, 0x5EA5AAFF, 0x624F50FF, 0xA0ADA6FF, 0x217051FF, 0x9484AAFF,
                0x6FD36DFF, 0x2F5B9CFF, 0x989A4EFF, 0xEC5367FF, 0x5CB5D0FF, 0x5C4F72FF, 0xEBB6D4FF, 0x046242FF,
                0x27BD8CFF, 0x960B85FF, 0x95553FFF, 0x6F7B63FF, 0x4C1658FF, 0xFDE3DFFF, 0x5B98B4FF, 0x7E0D9FFF,
                0xA10833FF, 0x82A9D6FF, 0xBAF5E2FF, 0x241823FF, 0xD78A65FF, 0x74462DFF, 0x64B3D1FF, 0x5C824BFF,
                0x804061FF, 0x3791BFFF, 0x592E2DFF, 0x186C1EFF, 0x6FBFBDFF, 0x9D3EA9FF, 0xD5E5F4FF, 0x3E416EFF,
                0x28C834FF, 0x285509FF, 0xA5BDACFF, 0xCB4956FF, 0x62C277FF, 0x030828FF, 0x65FF72FF, 0xEF6941FF,
                0x1C8FC2FF, 0x562F53FF, 0xF29F42FF, 0xFAA99FFF, 0xAF32A2FF, 0x1FB089FF, 0xB4AA73FF, 0x469090FF,
                0x9E44A9FF, 0xB1C1DFFF, 0xFC6E8DFF, 0x2A476AFF, 0xC6F8FFFF, 0x7F101EFF, 0x747144FF, 0xC376E8FF,
                0xCF925BFF, 0xB83E39FF, 0x92EB9EFF, 0x089994FF, 0xF09BDCFF, 0x0E4117FF, 0x39251DFF, 0x1C1059FF,
        };
        final int[] ghr255 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0xA01948FF, 0x18CA91FF, 0x076C12FF, 0xD1B8E1FF, 0xC768D7FF, 0x8F6730FF, 0x44BF74FF,
                0x76450FFF, 0x4569B5FF, 0x1A0635FF, 0xC5706FFF, 0x007A43FF, 0x98C5B6FF, 0x9B39B2FF, 0x9CF1EFFF,
                0x48262FFF, 0xFAB8C0FF, 0x0A2815FF, 0x275ECCFF, 0x6A1E7DFF, 0x778E35FF, 0xBD3819FF, 0x9BE1DEFF,
                0x8C0F0AFF, 0xACB1A0FF, 0xA394C4FF, 0x68070CFF, 0x507394FF, 0x1B5264FF, 0xCB8C55FF, 0x8534B8FF,
                0xB6C6E4FF, 0x261286FF, 0x37D5E2FF, 0x0A3744FF, 0xE758CBFF, 0xBF3C6BFF, 0xA1A75EFF, 0x945B87FF,
                0xB9AA7FFF, 0x8F3D3FFF, 0xC0D4C2FF, 0x1D0372FF, 0xF277C4FF, 0x41C18CFF, 0xA7EFFCFF, 0xC52EC5FF,
                0x525124FF, 0xE46884FF, 0x0F1475FF, 0x6072D6FF, 0xCDBDC1FF, 0x25226CFF, 0xCBDBD1FF, 0x7A0C28FF,
                0xF5B57DFF, 0x546FA2FF, 0x3E3900FF, 0x8BA144FF, 0x596F2BFF, 0x9F9224FF, 0x6F5036FF, 0x34E0A7FF,
                0xE8BB8CFF, 0x56A7EDFF, 0x95902EFF, 0x782E86FF, 0x6BB7EEFF, 0x1E6640FF, 0xB2956EFF, 0x298358FF,
                0xDEC1F3FF, 0x1D2C77FF, 0xB7BDCFFF, 0x56AF59FF, 0x603A11FF, 0xE154F5FF, 0x663C32FF, 0x5E256FFF,
                0xD579D2FF, 0xEADC7FFF, 0x68A1B3FF, 0x416695FF, 0xB786B0FF, 0xC12236FF, 0xF06658FF, 0x708393FF,
                0x972E91FF, 0xD4D07DFF, 0x271E2CFF, 0xA4C292FF, 0xB644ACFF, 0xAE5FBDFF, 0x695C45FF, 0x944266FF,
                0xA2677FFF, 0x55CEA8FF, 0xE6AC96FF, 0xC5685BFF, 0x167E0AFF, 0x96ACADFF, 0x681E91FF, 0x7C9293FF,
                0x9A653AFF, 0x3F2769FF, 0x6C3609FF, 0xE3A5D9FF, 0x041627FF, 0xBC708CFF, 0xA4122FFF, 0x5DAD76FF,
                0x026E97FF, 0x5F9729FF, 0xB53C07FF, 0x91A9B1FF, 0xAA2280FF, 0x98C75CFF, 0x7B8CEAFF, 0x050307FF,
                0xA64D9EFF, 0x8F2A5FFF, 0x5298B3FF, 0x2A6D68FF, 0xF6B0D1FF, 0x9C2806FF, 0x8ADA85FF, 0x20A65AFF,
                0x09353CFF, 0x9379AEFF, 0x456858FF, 0x8A777CFF, 0x757F7DFF, 0x265E5DFF, 0xFD9CBAFF, 0x227F55FF,
                0xFDDFBAFF, 0x441553FF, 0x90BDEAFF, 0x350337FF, 0xD9BE58FF, 0x321D29FF, 0x5D8E6DFF, 0xA94632FF,
                0xFCD36FFF, 0xE55DDBFF, 0x09100CFF, 0x213E5EFF, 0x278C55FF, 0x61411DFF, 0xA8D3B2FF, 0xCD71A7FF,
                0x273164FF, 0x8DB163FF, 0x906C3DFF, 0x5087F9FF, 0xB23BADFF, 0x34299AFF, 0xA4C3F4FF, 0xA887B4FF,
                0xA7FAC2FF, 0x01564EFF, 0x4B6ABEFF, 0x34A568FF, 0x26733AFF, 0xD8A3DFFF, 0x3F649CFF, 0x5A2825FF,
                0x84FB87FF, 0x828431FF, 0x168AC7FF, 0x5D4480FF, 0x425D36FF, 0x23B02FFF, 0x5E386DFF, 0x94AFB9FF,
                0x92523CFF, 0xAAA4CFFF, 0x85B198FF, 0x458082FF, 0x6C1EA6FF, 0x41CE84FF, 0xD55EC7FF, 0x0B64A8FF,
                0xABC6F6FF, 0x272381FF, 0xFEB595FF, 0x311501FF, 0x3B8AA8FF, 0x3C832FFF, 0xEB9594FF, 0x637476FF,
                0x963431FF, 0xCC9B9CFF, 0x2C6732FF, 0x06BBE9FF, 0xEAAB41FF, 0x3AA514FF, 0x135D3FFF, 0xB061D6FF,
                0x788F7FFF, 0xBB5524FF, 0xC0E377FF, 0x1C5102FF, 0xBBE9C7FF, 0x511B2DFF, 0x88B9D1FF, 0x2A0224FF,
                0xC98221FF, 0x263B13FF, 0xC6797AFF, 0xA32E93FF, 0x0A946DFF, 0x938650FF, 0x72BECEFF, 0x9B33A4FF,
                0xB6DEF5FF, 0x930B29FF, 0xEFBC93FF, 0x6AB0CBFF, 0xC16188FF, 0x046367FF, 0x844555FF, 0x81BD36FF,
                0x771375FF, 0x012908FF, 0x65BA3BFF, 0x461980FF, 0x8D91AAFF, 0x2C649FFF, 0xA9792DFF, 0x3F7758FF,
                0x766581FF, 0x7F2A4FFF, 0x63B0AFFF, 0x336C0BFF, 0xA393B2FF, 0x89B36EFF, 0xE3E2E3FF, 0x309D23FF,
                0x584143FF, 0x6DA63AFF, 0x896EB5FF, 0x3242B5FF, 0x162B20FF, 0x89D778FF, 0x467C86FF, 0x2A2734FF,
        };
        /*
          Uses YCwCm instead of IPT, still Gaussian-distributed Halton sequence.
          Current default.
         */
        final int[] ghy63 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0x5D8ABCFF, 0x620105FF, 0xBD8CAAFF, 0x872B9FFF, 0x5D8545FF, 0x114C66FF, 0x204503FF,
                0xAC6FBFFF, 0x642D53FF, 0xBE9F85FF, 0x19806EFF, 0x789997FF, 0xD23589FF, 0xB5D7EDFF, 0xB8978BFF,
                0x4A695FFF, 0x5B1038FF, 0xAD54CAFF, 0x389888FF, 0xC7A456FF, 0x157E80FF, 0x5FC274FF, 0x485395FF,
                0xA2C1D1FF, 0x90673DFF, 0xE9FEEEFF, 0xE6EDB5FF, 0x734A32FF, 0x9784ACFF, 0x3D4060FF, 0xE9E189FF,
                0xB1CF89FF, 0xC82488FF, 0xB39BBBFF, 0xE8E5C7FF, 0x6898D0FF, 0x008428FF, 0xB5B44CFF, 0x060B23FF,
                0xA7464CFF, 0xA6F2AEFF, 0xAF6E86FF, 0x26305EFF, 0xD3F9CBFF, 0x5D3B25FF, 0x9EB9ADFF, 0xA62D8DFF,
                0xC7D6F6FF, 0x77273FFF, 0xFC2A8CFF, 0x215024FF, 0xE3988EFF, 0xA94AA6FF, 0xDF82E4FF, 0x3872A0FF,
        };

        final int[] ghy255 = new int[]{
                0x00000000, 0x0B080FFF, 0xFAF7F0FF, 0x797577FF, 0x555555FF, 0xAAAAAAFF, 0x353336FF, 0xE0E0E0FF,
                0xC8C8C8FF, 0x5D8ABCFF, 0x620105FF, 0xBD8CAAFF, 0x872B9FFF, 0x5D8545FF, 0x114C66FF, 0x204503FF,
                0xAC6FBFFF, 0x642D53FF, 0xBE9F85FF, 0x19806EFF, 0x789997FF, 0xD23589FF, 0xB5D7EDFF, 0xB8978BFF,
                0x4A695FFF, 0x5B1038FF, 0xAD54CAFF, 0x389888FF, 0xC7A456FF, 0x157E80FF, 0x5FC274FF, 0x485395FF,
                0xA2C1D1FF, 0x90673DFF, 0xE9FEEEFF, 0xE6EDB5FF, 0x734A32FF, 0x9784ACFF, 0x3D4060FF, 0xE9E189FF,
                0xB1CF89FF, 0xC82488FF, 0xB39BBBFF, 0xE8E5C7FF, 0x6898D0FF, 0x008428FF, 0xB5B44CFF, 0x060B23FF,
                0xA7464CFF, 0xA6F2AEFF, 0xAF6E86FF, 0x26305EFF, 0xD3F9CBFF, 0x5D3B25FF, 0x9EB9ADFF, 0xA62D8DFF,
                0xC7D6F6FF, 0x77273FFF, 0xFC2A8CFF, 0x215024FF, 0xE3988EFF, 0xA94AA6FF, 0xDF82E4FF, 0x3872A0FF,
                0xA09795FF, 0xB0C1BBFF, 0x9F5A54FF, 0x789850FF, 0x57205EFF, 0xA780B6FF, 0x639B63FF, 0x7DE492FF,
                0x38854BFF, 0x68D367FF, 0x465533FF, 0x32AFA9FF, 0x575ECAFF, 0x6875CDFF, 0x7F9E64FF, 0x69360CFF,
                0x239076FF, 0x6BCC6EFF, 0x8E1A56FF, 0x8C73BBFF, 0x236656FF, 0xB9D6A8FF, 0x4A9989FF, 0xD89AC0FF,
                0x9F90A2FF, 0x198A14FF, 0x75EDB5FF, 0x5975C9FF, 0x332E18FF, 0x3EAFA9FF, 0x610236FF, 0x3F2C76FF,
                0x7BD478FF, 0x666B2BFF, 0xCED3F3FF, 0x8B6AA0FF, 0xF6BBD3FF, 0xBF9A64FF, 0x11A636FF, 0xAFA6BAFF,
                0xAC215FFF, 0x69BC6CFF, 0xC2F189FF, 0xF672C6FF, 0x72606AFF, 0xE04D8DFF, 0x8464A4FF, 0xF277B7FF,
                0x54664CFF, 0x88454FFF, 0xB4878BFF, 0x155F6DFF, 0x835AC0FF, 0x84855FFF, 0x0B601AFF, 0x4C0414FF,
                0x149B41FF, 0xA8936BFF, 0xE8F1F7FF, 0xBAC3C9FF, 0x6D844CFF, 0x90D37BFF, 0xBD7290FF, 0x4F465AFF,
                0xD39A9EFF, 0x93E9CBFF, 0x6768ACFF, 0xBA56B2FF, 0x25B282FF, 0x46CB73FF, 0xE9EAF8FF, 0xA31242FF,
                0x90DB77FF, 0x26A45EFF, 0x181517FF, 0xD7EEA4FF, 0x187B45FF, 0xCC598BFF, 0x75192DFF, 0xBFC0ECFF,
                0xDDAB6DFF, 0x537280FF, 0xC58A94FF, 0xECA5E1FF, 0x627ED2FF, 0x46BB81FF, 0x52D3B1FF, 0xDB9CC6FF,
                0x54726CFF, 0xA69B99FF, 0x2C2F01FF, 0x9EA5A5FF, 0x415866FF, 0xB06D6DFF, 0x439183FF, 0xBCD7ABFF,
                0xA085BBFF, 0x783153FF, 0x776367FF, 0x82B7A5FF, 0x635222FF, 0x76CB61FF, 0x346BA3FF, 0x72F0DAFF,
                0x2E3533FF, 0x331D43FF, 0x49A890FF, 0x1F380CFF, 0x80B39FFF, 0x962B4DFF, 0xF79EB6FF, 0x37083AFF,
                0xA0FDBDFF, 0x6B8E56FF, 0x610E78FF, 0xDC3C84FF, 0xB690C6FF, 0x208197FF, 0x1EB28EFF, 0xF2B9D9FF,
                0x95EED0FF, 0x163E4EFF, 0xBB74CAFF, 0x4F6614FF, 0x6BD4BAFF, 0x287F5FFF, 0xBD6D95FF, 0x9067A5FF,
                0x4CEFA3FF, 0x7D4098FF, 0x4A1B59FF, 0x5DB264FF, 0x5D8E58FF, 0xAA98F2FF, 0x7F3A6AFF, 0x2D6042FF,
                0x2CE593FF, 0x67244AFF, 0x626139FF, 0xDEA991FF, 0x449187FF, 0xCDF8ECFF, 0x062D29FF, 0xE5F5B5FF,
                0x4F5686FF, 0x8499ABFF, 0x7B5AB2FF, 0xBD98CCFF, 0x949864FF, 0x465135FF, 0xA4A5D7FF, 0xE2B987FF,
                0x2FA064FF, 0xFFE0C6FF, 0x8B266AFF, 0x878C92FF, 0x4F2E0EFF, 0xF6E3D5FF, 0x1E6B49FF, 0xAF3D47FF,
                0x1C0533FF, 0x83214BFF, 0x20DA70FF, 0x17524AFF, 0xA5BFB5FF, 0x687327FF, 0x5DD87CFF, 0xA3D7C3FF,
                0x906B6BFF, 0x847FA3FF, 0x5B2A3EFF, 0x7BC252FF, 0xCBAE98FF, 0xB72662FF, 0x51AEB0FF, 0x12095DFF,
                0x86B981FF, 0x7682A6FF, 0xC32A76FF, 0xC6BEDEFF, 0xB26155FF, 0x899F69FF, 0x413D99FF, 0x24301CFF,
                0x418D41FF, 0xCD828AFF, 0x375876FF, 0x989B55FF, 0x6D4642FF, 0x5F81BFFF, 0xF3F8C6FF, 0xE26E72FF,
        };
        /*
          Uses IPT but lets rejection sampling eliminate P and T instead of a hard modulus. Still
          Gaussian-distributed Halton sequence.
         */
        final int[] ghp63 = new int[]{
                0x00000000, 0x0B080FFF, 0x353336FF, 0x555555FF, 0x797577FF, 0xAAAAAAFF, 0xC8C8C8FF, 0xE0E0E0FF,
                0xFAF7F0FF, 0x217CD2FF, 0x540A44FF, 0xD6C2DDFF, 0xF19FFFFF, 0x1E8FF0FF, 0x4F326FFF, 0x9EB025FF,
                0x9753C2FF, 0x75E3E0FF, 0xFE927FFF, 0x488C54FF, 0x8FABFBFF, 0x910945FF, 0x46BD6BFF, 0x92C3B9FF,
                0xC0654DFF, 0x011183FF, 0xFF4100FF, 0x09A7C5FF, 0x2A4356FF, 0x45ABF3FF, 0x400433FF, 0x00BA90FF,
                0x4B5423FF, 0xC3ABEFFF, 0xFD3676FF, 0xA25FDDFF, 0xE9E7E0FF, 0xA33323FF, 0xA3D455FF, 0x673EC9FF,
                0xDFF78CFF, 0x372E94FF, 0x0A5617FF, 0x2C7168FF, 0xDB9278FF, 0x6ED5B7FF, 0x90784EFF, 0x7098ADFF,
                0xA9737CFF, 0x41F769FF, 0xC4988BFF, 0x059D86FF, 0x9C916DFF, 0x360A5DFF, 0x96C341FF, 0x5623ADFF,
                0x08A2A3FF, 0x414E49FF, 0x5FA423FF, 0xAAA2F2FF, 0x8C91B4FF, 0xD52B42FF, 0x8AEA66FF, 0xB2D7EAFF,
        };
        png8.palette = gif.palette = new PaletteReducer();
        gif.palette.setDitherStrength(0.5f);
        for (int colorCount = 4; colorCount <= 256; colorCount <<= 1) {
            gif.palette.exact(ghy255, colorCount);
            for (String s : inputs) {
                load(s);
                try {
                    Pixmap pixmap;
                    Array<Pixmap> pm = new Array<>(64);
                    for (int i = 0; i < 64; i++) {
                        pixmap = renderer.drawSplats(voxels, (i & 63) * 0x1p-6f, VoxIO.lastMaterials);
                        Pixmap p = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), pixmap.getFormat());
                        p.drawPixmap(pixmap, 0, 0);
                        pm.add(p);
                        if(colorCount == 256)
                            png.write(Gdx.files.local("out/" + name + '/' + name + "_angle" + i + ".png"), p);
                        png8.write(Gdx.files.local("out/lowColor/" + colorCount + "/" + name + '/' + name + "_angle" + i + ".png"), p, false);
//                    png8.write(Gdx.files.local("out/ghy/" + name + '/' + name + "_angle" + i + ".png"), p, false);
//                    png8.write(Gdx.files.local("out/ghp/" + name + '/' + name + "_angle" + i + ".png"), p, false);
                    }
                    //gif.palette.setDefaultPalette();
//                gif.palette.analyze(pm, 150);
                    gif.write(Gdx.files.local("out/lowColor/" + colorCount + "/" + name + '/' + name + ".gif"), pm, 12);
//                gif.write(Gdx.files.local("out/ghy/" + name + '/' + name + ".gif"), pm, 12);
//                gif.write(Gdx.files.local("out/ghp/" + name + '/' + name + ".gif"), pm, 12);
                    if(colorCount == 256)
                        apng.write(Gdx.files.local("out/" + name + '/' + name + ".png"), pm, 12);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        Gdx.app.exit();
    }

    @Override
    public void render() {
    }


    public static void main(String[] arg) {
        Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
        config.setTitle("Writing Test");
        config.setWindowedMode(SCREEN_WIDTH, SCREEN_HEIGHT);
        config.setIdleFPS(10);
        config.useVsync(true);
        config.setResizable(false);
        config.disableAudio(true);
        final VoxSwirl app = new VoxSwirl(arg);
        new Lwjgl3Application(app, config);
    }

    public void load(String name) {
        try {
            //// loads a file by its full path, which we get via a command-line arg
            voxels = VoxIO.readVox(new LittleEndianDataInputStream(new FileInputStream(name)));
            if(voxels == null) {
                voxels = new byte[][][]{{{1}}};
                return;
            }
            Tools3D.soakInPlace(voxels);
            int nameStart = Math.max(name.lastIndexOf('/'), name.lastIndexOf('\\')) + 1;
            this.name = name.substring(nameStart, name.indexOf('.', nameStart));
            renderer = new SplatRenderer(voxels.length);
            renderer.palette = VoxIO.lastPalette;
            
        } catch (FileNotFoundException e) {
            voxels = new byte[][][]{{{1}}}; 
        }
    }
}
